/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.ocl.xtext.base.services.BaseGrammarAccess;
import org.eclipse.ocl.xtext.completeocl.services.CompleteOCLGrammarAccess;
import org.eclipse.ocl.xtext.essentialocl.services.EssentialOCLGrammarAccess;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Document");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedImportsImportParserRuleCall_0_0 = (RuleCall)cOwnedImportsAssignment_0.eContents().get(0);
		private final Assignment cOwnedPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedPropertiesPropertyParserRuleCall_1_0 = (RuleCall)cOwnedPropertiesAssignment_1.eContents().get(0);
		
		//Document:
		//	ownedImports+=Import*
		//	//	('beginocl' ownedOCLDocument=CompleteOCLDocumentCS 'endocl')?
		//	ownedProperties+=Property+;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedImports+=Import* //	('beginocl' ownedOCLDocument=CompleteOCLDocumentCS 'endocl')?
		//ownedProperties+=Property+
		public Group getGroup() { return cGroup; }
		
		//ownedImports+=Import*
		public Assignment getOwnedImportsAssignment_0() { return cOwnedImportsAssignment_0; }
		
		//Import
		public RuleCall getOwnedImportsImportParserRuleCall_0_0() { return cOwnedImportsImportParserRuleCall_0_0; }
		
		////	('beginocl' ownedOCLDocument=CompleteOCLDocumentCS 'endocl')?
		//ownedProperties+=Property+
		public Assignment getOwnedPropertiesAssignment_1() { return cOwnedPropertiesAssignment_1; }
		
		//Property
		public RuleCall getOwnedPropertiesPropertyParserRuleCall_1_0() { return cOwnedPropertiesPropertyParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURIIMPORT_URITerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importURI=IMPORT_URI;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=IMPORT_URI
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=IMPORT_URI
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//IMPORT_URI
		public RuleCall getImportURIIMPORT_URITerminalRuleCall_1_0() { return cImportURIIMPORT_URITerminalRuleCall_1_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAndPropertyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cLeftAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cLeftUnaryPropertyParserRuleCall_0_1_0_0 = (RuleCall)cLeftAssignment_0_1_0.eContents().get(0);
		private final Assignment cLeftAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cLeftBinaryPropertyParserRuleCall_0_1_1_0 = (RuleCall)cLeftAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cAlternatives_0_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cLeftAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cLeftUnaryPropertyParserRuleCall_0_1_2_1_0 = (RuleCall)cLeftAssignment_0_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2_2 = (Keyword)cGroup_0_1_2.eContents().get(2);
		private final Group cGroup_0_1_3 = (Group)cAlternatives_0_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_0_1_3_0 = (Keyword)cGroup_0_1_3.eContents().get(0);
		private final Assignment cLeftAssignment_0_1_3_1 = (Assignment)cGroup_0_1_3.eContents().get(1);
		private final RuleCall cLeftBinaryPropertyParserRuleCall_0_1_3_1_0 = (RuleCall)cLeftAssignment_0_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_3_2 = (Keyword)cGroup_0_1_3.eContents().get(2);
		private final Keyword cAndKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cRightAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRightPropertyParserRuleCall_0_3_0 = (RuleCall)cRightAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOrPropertyBooleanPropertyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cLeftAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cLeftUnaryPropertyParserRuleCall_1_1_0_0 = (RuleCall)cLeftAssignment_1_1_0.eContents().get(0);
		private final Assignment cLeftAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cLeftBinaryPropertyParserRuleCall_1_1_1_0 = (RuleCall)cLeftAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cAlternatives_1_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cLeftAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cLeftUnaryPropertyParserRuleCall_1_1_2_1_0 = (RuleCall)cLeftAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2_2 = (Keyword)cGroup_1_1_2.eContents().get(2);
		private final Group cGroup_1_1_3 = (Group)cAlternatives_1_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cLeftAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cLeftBinaryPropertyParserRuleCall_1_1_3_1_0 = (RuleCall)cLeftAssignment_1_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3_2 = (Keyword)cGroup_1_1_3.eContents().get(2);
		private final Keyword cOrKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightPropertyParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAbortPropertyAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cLeftAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cLeftUnaryPropertyParserRuleCall_2_1_0_0 = (RuleCall)cLeftAssignment_2_1_0.eContents().get(0);
		private final Assignment cLeftAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cLeftBinaryPropertyParserRuleCall_2_1_1_0 = (RuleCall)cLeftAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cAlternatives_2_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cLeftAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cLeftUnaryPropertyParserRuleCall_2_1_2_1_0 = (RuleCall)cLeftAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_2_2 = (Keyword)cGroup_2_1_2.eContents().get(2);
		private final Group cGroup_2_1_3 = (Group)cAlternatives_2_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_2_1_3_0 = (Keyword)cGroup_2_1_3.eContents().get(0);
		private final Assignment cLeftAssignment_2_1_3_1 = (Assignment)cGroup_2_1_3.eContents().get(1);
		private final RuleCall cLeftBinaryPropertyParserRuleCall_2_1_3_1_0 = (RuleCall)cLeftAssignment_2_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_3_2 = (Keyword)cGroup_2_1_3.eContents().get(2);
		private final Keyword cAbortKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cRightAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRightBooleanOrOCLLiteralParserRuleCall_2_3_0 = (RuleCall)cRightAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cUntilPropertyAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cLeftAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cLeftUnaryPropertyParserRuleCall_3_1_0_0 = (RuleCall)cLeftAssignment_3_1_0.eContents().get(0);
		private final Assignment cLeftAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cLeftBinaryPropertyParserRuleCall_3_1_1_0 = (RuleCall)cLeftAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cAlternatives_3_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Assignment cLeftAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cLeftUnaryPropertyParserRuleCall_3_1_2_1_0 = (RuleCall)cLeftAssignment_3_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_2_2 = (Keyword)cGroup_3_1_2.eContents().get(2);
		private final Group cGroup_3_1_3 = (Group)cAlternatives_3_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final Assignment cLeftAssignment_3_1_3_1 = (Assignment)cGroup_3_1_3.eContents().get(1);
		private final RuleCall cLeftBinaryPropertyParserRuleCall_3_1_3_1_0 = (RuleCall)cLeftAssignment_3_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_3_2 = (Keyword)cGroup_3_1_3.eContents().get(2);
		private final Keyword cUntilKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cRightAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cRightBooleanOrOCLLiteralParserRuleCall_3_3_0 = (RuleCall)cRightAssignment_3_3.eContents().get(0);
		private final RuleCall cUnaryPropertyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBinaryPropertyParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cUnaryPropertyParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cBinaryPropertyParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		
		//Property:
		//	{AndProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')')
		//	'and' right=Property
		//	| {OrPropertyBooleanProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '('
		//	left=BinaryProperty ')') 'or' right=Property
		//	| {AbortProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty
		//	')') 'abort' right=BooleanOrOCLLiteral
		//	| {UntilProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty
		//	')') 'until' right=BooleanOrOCLLiteral
		//	| UnaryProperty | BinaryProperty | '(' UnaryProperty ')' | '(' BinaryProperty ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{AndProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')')
		//'and' right=Property | {OrPropertyBooleanProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty
		//')' | '(' left=BinaryProperty ')') 'or' right=Property | {AbortProperty} (left=UnaryProperty | left=BinaryProperty |
		//'(' left=UnaryProperty ')' | '(' left=BinaryProperty ')') 'abort' right=BooleanOrOCLLiteral | {UntilProperty}
		//(left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')') 'until'
		//right=BooleanOrOCLLiteral | UnaryProperty | BinaryProperty | '(' UnaryProperty ')' | '(' BinaryProperty ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{AndProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')')
		//'and' right=Property
		public Group getGroup_0() { return cGroup_0; }
		
		//{AndProperty}
		public Action getAndPropertyAction_0_0() { return cAndPropertyAction_0_0; }
		
		//(left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')')
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//left=UnaryProperty
		public Assignment getLeftAssignment_0_1_0() { return cLeftAssignment_0_1_0; }
		
		//UnaryProperty
		public RuleCall getLeftUnaryPropertyParserRuleCall_0_1_0_0() { return cLeftUnaryPropertyParserRuleCall_0_1_0_0; }
		
		//left=BinaryProperty
		public Assignment getLeftAssignment_0_1_1() { return cLeftAssignment_0_1_1; }
		
		//BinaryProperty
		public RuleCall getLeftBinaryPropertyParserRuleCall_0_1_1_0() { return cLeftBinaryPropertyParserRuleCall_0_1_1_0; }
		
		//'(' left=UnaryProperty ')'
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_2_0() { return cLeftParenthesisKeyword_0_1_2_0; }
		
		//left=UnaryProperty
		public Assignment getLeftAssignment_0_1_2_1() { return cLeftAssignment_0_1_2_1; }
		
		//UnaryProperty
		public RuleCall getLeftUnaryPropertyParserRuleCall_0_1_2_1_0() { return cLeftUnaryPropertyParserRuleCall_0_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_2_2() { return cRightParenthesisKeyword_0_1_2_2; }
		
		//'(' left=BinaryProperty ')'
		public Group getGroup_0_1_3() { return cGroup_0_1_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_3_0() { return cLeftParenthesisKeyword_0_1_3_0; }
		
		//left=BinaryProperty
		public Assignment getLeftAssignment_0_1_3_1() { return cLeftAssignment_0_1_3_1; }
		
		//BinaryProperty
		public RuleCall getLeftBinaryPropertyParserRuleCall_0_1_3_1_0() { return cLeftBinaryPropertyParserRuleCall_0_1_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_3_2() { return cRightParenthesisKeyword_0_1_3_2; }
		
		//'and'
		public Keyword getAndKeyword_0_2() { return cAndKeyword_0_2; }
		
		//right=Property
		public Assignment getRightAssignment_0_3() { return cRightAssignment_0_3; }
		
		//Property
		public RuleCall getRightPropertyParserRuleCall_0_3_0() { return cRightPropertyParserRuleCall_0_3_0; }
		
		//{OrPropertyBooleanProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '('
		//left=BinaryProperty ')') 'or' right=Property
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrPropertyBooleanProperty}
		public Action getOrPropertyBooleanPropertyAction_1_0() { return cOrPropertyBooleanPropertyAction_1_0; }
		
		//(left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//left=UnaryProperty
		public Assignment getLeftAssignment_1_1_0() { return cLeftAssignment_1_1_0; }
		
		//UnaryProperty
		public RuleCall getLeftUnaryPropertyParserRuleCall_1_1_0_0() { return cLeftUnaryPropertyParserRuleCall_1_1_0_0; }
		
		//left=BinaryProperty
		public Assignment getLeftAssignment_1_1_1() { return cLeftAssignment_1_1_1; }
		
		//BinaryProperty
		public RuleCall getLeftBinaryPropertyParserRuleCall_1_1_1_0() { return cLeftBinaryPropertyParserRuleCall_1_1_1_0; }
		
		//'(' left=UnaryProperty ')'
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_2_0() { return cLeftParenthesisKeyword_1_1_2_0; }
		
		//left=UnaryProperty
		public Assignment getLeftAssignment_1_1_2_1() { return cLeftAssignment_1_1_2_1; }
		
		//UnaryProperty
		public RuleCall getLeftUnaryPropertyParserRuleCall_1_1_2_1_0() { return cLeftUnaryPropertyParserRuleCall_1_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2_2() { return cRightParenthesisKeyword_1_1_2_2; }
		
		//'(' left=BinaryProperty ')'
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_3_0() { return cLeftParenthesisKeyword_1_1_3_0; }
		
		//left=BinaryProperty
		public Assignment getLeftAssignment_1_1_3_1() { return cLeftAssignment_1_1_3_1; }
		
		//BinaryProperty
		public RuleCall getLeftBinaryPropertyParserRuleCall_1_1_3_1_0() { return cLeftBinaryPropertyParserRuleCall_1_1_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_3_2() { return cRightParenthesisKeyword_1_1_3_2; }
		
		//'or'
		public Keyword getOrKeyword_1_2() { return cOrKeyword_1_2; }
		
		//right=Property
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }
		
		//Property
		public RuleCall getRightPropertyParserRuleCall_1_3_0() { return cRightPropertyParserRuleCall_1_3_0; }
		
		//{AbortProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')')
		//'abort' right=BooleanOrOCLLiteral
		public Group getGroup_2() { return cGroup_2; }
		
		//{AbortProperty}
		public Action getAbortPropertyAction_2_0() { return cAbortPropertyAction_2_0; }
		
		//(left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')')
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//left=UnaryProperty
		public Assignment getLeftAssignment_2_1_0() { return cLeftAssignment_2_1_0; }
		
		//UnaryProperty
		public RuleCall getLeftUnaryPropertyParserRuleCall_2_1_0_0() { return cLeftUnaryPropertyParserRuleCall_2_1_0_0; }
		
		//left=BinaryProperty
		public Assignment getLeftAssignment_2_1_1() { return cLeftAssignment_2_1_1; }
		
		//BinaryProperty
		public RuleCall getLeftBinaryPropertyParserRuleCall_2_1_1_0() { return cLeftBinaryPropertyParserRuleCall_2_1_1_0; }
		
		//'(' left=UnaryProperty ')'
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_2_0() { return cLeftParenthesisKeyword_2_1_2_0; }
		
		//left=UnaryProperty
		public Assignment getLeftAssignment_2_1_2_1() { return cLeftAssignment_2_1_2_1; }
		
		//UnaryProperty
		public RuleCall getLeftUnaryPropertyParserRuleCall_2_1_2_1_0() { return cLeftUnaryPropertyParserRuleCall_2_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_2_2() { return cRightParenthesisKeyword_2_1_2_2; }
		
		//'(' left=BinaryProperty ')'
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_3_0() { return cLeftParenthesisKeyword_2_1_3_0; }
		
		//left=BinaryProperty
		public Assignment getLeftAssignment_2_1_3_1() { return cLeftAssignment_2_1_3_1; }
		
		//BinaryProperty
		public RuleCall getLeftBinaryPropertyParserRuleCall_2_1_3_1_0() { return cLeftBinaryPropertyParserRuleCall_2_1_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_3_2() { return cRightParenthesisKeyword_2_1_3_2; }
		
		//'abort'
		public Keyword getAbortKeyword_2_2() { return cAbortKeyword_2_2; }
		
		//right=BooleanOrOCLLiteral
		public Assignment getRightAssignment_2_3() { return cRightAssignment_2_3; }
		
		//BooleanOrOCLLiteral
		public RuleCall getRightBooleanOrOCLLiteralParserRuleCall_2_3_0() { return cRightBooleanOrOCLLiteralParserRuleCall_2_3_0; }
		
		//{UntilProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')')
		//'until' right=BooleanOrOCLLiteral
		public Group getGroup_3() { return cGroup_3; }
		
		//{UntilProperty}
		public Action getUntilPropertyAction_3_0() { return cUntilPropertyAction_3_0; }
		
		//(left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')')
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//left=UnaryProperty
		public Assignment getLeftAssignment_3_1_0() { return cLeftAssignment_3_1_0; }
		
		//UnaryProperty
		public RuleCall getLeftUnaryPropertyParserRuleCall_3_1_0_0() { return cLeftUnaryPropertyParserRuleCall_3_1_0_0; }
		
		//left=BinaryProperty
		public Assignment getLeftAssignment_3_1_1() { return cLeftAssignment_3_1_1; }
		
		//BinaryProperty
		public RuleCall getLeftBinaryPropertyParserRuleCall_3_1_1_0() { return cLeftBinaryPropertyParserRuleCall_3_1_1_0; }
		
		//'(' left=UnaryProperty ')'
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1_2_0() { return cLeftParenthesisKeyword_3_1_2_0; }
		
		//left=UnaryProperty
		public Assignment getLeftAssignment_3_1_2_1() { return cLeftAssignment_3_1_2_1; }
		
		//UnaryProperty
		public RuleCall getLeftUnaryPropertyParserRuleCall_3_1_2_1_0() { return cLeftUnaryPropertyParserRuleCall_3_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_1_2_2() { return cRightParenthesisKeyword_3_1_2_2; }
		
		//'(' left=BinaryProperty ')'
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1_3_0() { return cLeftParenthesisKeyword_3_1_3_0; }
		
		//left=BinaryProperty
		public Assignment getLeftAssignment_3_1_3_1() { return cLeftAssignment_3_1_3_1; }
		
		//BinaryProperty
		public RuleCall getLeftBinaryPropertyParserRuleCall_3_1_3_1_0() { return cLeftBinaryPropertyParserRuleCall_3_1_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_1_3_2() { return cRightParenthesisKeyword_3_1_3_2; }
		
		//'until'
		public Keyword getUntilKeyword_3_2() { return cUntilKeyword_3_2; }
		
		//right=BooleanOrOCLLiteral
		public Assignment getRightAssignment_3_3() { return cRightAssignment_3_3; }
		
		//BooleanOrOCLLiteral
		public RuleCall getRightBooleanOrOCLLiteralParserRuleCall_3_3_0() { return cRightBooleanOrOCLLiteralParserRuleCall_3_3_0; }
		
		//UnaryProperty
		public RuleCall getUnaryPropertyParserRuleCall_4() { return cUnaryPropertyParserRuleCall_4; }
		
		//BinaryProperty
		public RuleCall getBinaryPropertyParserRuleCall_5() { return cBinaryPropertyParserRuleCall_5; }
		
		//'(' UnaryProperty ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//UnaryProperty
		public RuleCall getUnaryPropertyParserRuleCall_6_1() { return cUnaryPropertyParserRuleCall_6_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
		
		//'(' BinaryProperty ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_0() { return cLeftParenthesisKeyword_7_0; }
		
		//BinaryProperty
		public RuleCall getBinaryPropertyParserRuleCall_7_1() { return cBinaryPropertyParserRuleCall_7_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_2() { return cRightParenthesisKeyword_7_2; }
	}
	public class UnaryPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UnaryProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanPropertyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperandAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperandBooleanOrOCLLiteralParserRuleCall_0_1_0 = (RuleCall)cOperandAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSequencePropertyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandSequenceParserRuleCall_1_1_0 = (RuleCall)cOperandAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSequenceTightPropertyAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cOperandAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperandSequenceParserRuleCall_2_1_0 = (RuleCall)cOperandAssignment_2_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cAlwaysPropertyAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cAlwaysKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cOperandAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cOperandPropertyParserRuleCall_3_2_0 = (RuleCall)cOperandAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cNeverBooleanPropertyAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cNeverKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOperandAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cOperandBooleanOrOCLLiteralParserRuleCall_4_2_0 = (RuleCall)cOperandAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cNeverSequencePropertyAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cNeverKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cOperandAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cOperandSequenceParserRuleCall_5_2_0 = (RuleCall)cOperandAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cNextEPropertyAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cNext_eKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cOperandAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cOperandBooleanOrOCLLiteralParserRuleCall_6_2_0 = (RuleCall)cOperandAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cEventuallyBooleanPropertyAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cEventuallyKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cOperandAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cOperandBooleanOrOCLLiteralParserRuleCall_7_2_0 = (RuleCall)cOperandAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cEventuallySequencePropertyAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cEventuallyKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cOperandAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cOperandSequenceParserRuleCall_8_2_0 = (RuleCall)cOperandAssignment_8_2.eContents().get(0);
		
		//UnaryProperty:
		//	{BooleanProperty} operand=BooleanOrOCLLiteral
		//	| {SequenceProperty} operand=Sequence
		//	| {SequenceTightProperty} operand=Sequence '!'
		//	| {AlwaysProperty} 'always' operand=Property
		//	| {NeverBooleanProperty} 'never' operand=BooleanOrOCLLiteral
		//	| {NeverSequenceProperty} 'never' operand=Sequence
		//	| {NextEProperty} 'next_e' operand=BooleanOrOCLLiteral
		//	| {EventuallyBooleanProperty} 'eventually!' operand=BooleanOrOCLLiteral
		//	| {EventuallySequenceProperty} 'eventually!' operand=Sequence;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanProperty} operand=BooleanOrOCLLiteral | {SequenceProperty} operand=Sequence | {SequenceTightProperty}
		//operand=Sequence '!' | {AlwaysProperty} 'always' operand=Property | {NeverBooleanProperty} 'never'
		//operand=BooleanOrOCLLiteral | {NeverSequenceProperty} 'never' operand=Sequence | {NextEProperty} 'next_e'
		//operand=BooleanOrOCLLiteral | {EventuallyBooleanProperty} 'eventually!' operand=BooleanOrOCLLiteral |
		//{EventuallySequenceProperty} 'eventually!' operand=Sequence
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BooleanProperty} operand=BooleanOrOCLLiteral
		public Group getGroup_0() { return cGroup_0; }
		
		//{BooleanProperty}
		public Action getBooleanPropertyAction_0_0() { return cBooleanPropertyAction_0_0; }
		
		//operand=BooleanOrOCLLiteral
		public Assignment getOperandAssignment_0_1() { return cOperandAssignment_0_1; }
		
		//BooleanOrOCLLiteral
		public RuleCall getOperandBooleanOrOCLLiteralParserRuleCall_0_1_0() { return cOperandBooleanOrOCLLiteralParserRuleCall_0_1_0; }
		
		//{SequenceProperty} operand=Sequence
		public Group getGroup_1() { return cGroup_1; }
		
		//{SequenceProperty}
		public Action getSequencePropertyAction_1_0() { return cSequencePropertyAction_1_0; }
		
		//operand=Sequence
		public Assignment getOperandAssignment_1_1() { return cOperandAssignment_1_1; }
		
		//Sequence
		public RuleCall getOperandSequenceParserRuleCall_1_1_0() { return cOperandSequenceParserRuleCall_1_1_0; }
		
		//{SequenceTightProperty} operand=Sequence '!'
		public Group getGroup_2() { return cGroup_2; }
		
		//{SequenceTightProperty}
		public Action getSequenceTightPropertyAction_2_0() { return cSequenceTightPropertyAction_2_0; }
		
		//operand=Sequence
		public Assignment getOperandAssignment_2_1() { return cOperandAssignment_2_1; }
		
		//Sequence
		public RuleCall getOperandSequenceParserRuleCall_2_1_0() { return cOperandSequenceParserRuleCall_2_1_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2_2() { return cExclamationMarkKeyword_2_2; }
		
		//{AlwaysProperty} 'always' operand=Property
		public Group getGroup_3() { return cGroup_3; }
		
		//{AlwaysProperty}
		public Action getAlwaysPropertyAction_3_0() { return cAlwaysPropertyAction_3_0; }
		
		//'always'
		public Keyword getAlwaysKeyword_3_1() { return cAlwaysKeyword_3_1; }
		
		//operand=Property
		public Assignment getOperandAssignment_3_2() { return cOperandAssignment_3_2; }
		
		//Property
		public RuleCall getOperandPropertyParserRuleCall_3_2_0() { return cOperandPropertyParserRuleCall_3_2_0; }
		
		//{NeverBooleanProperty} 'never' operand=BooleanOrOCLLiteral
		public Group getGroup_4() { return cGroup_4; }
		
		//{NeverBooleanProperty}
		public Action getNeverBooleanPropertyAction_4_0() { return cNeverBooleanPropertyAction_4_0; }
		
		//'never'
		public Keyword getNeverKeyword_4_1() { return cNeverKeyword_4_1; }
		
		//operand=BooleanOrOCLLiteral
		public Assignment getOperandAssignment_4_2() { return cOperandAssignment_4_2; }
		
		//BooleanOrOCLLiteral
		public RuleCall getOperandBooleanOrOCLLiteralParserRuleCall_4_2_0() { return cOperandBooleanOrOCLLiteralParserRuleCall_4_2_0; }
		
		//{NeverSequenceProperty} 'never' operand=Sequence
		public Group getGroup_5() { return cGroup_5; }
		
		//{NeverSequenceProperty}
		public Action getNeverSequencePropertyAction_5_0() { return cNeverSequencePropertyAction_5_0; }
		
		//'never'
		public Keyword getNeverKeyword_5_1() { return cNeverKeyword_5_1; }
		
		//operand=Sequence
		public Assignment getOperandAssignment_5_2() { return cOperandAssignment_5_2; }
		
		//Sequence
		public RuleCall getOperandSequenceParserRuleCall_5_2_0() { return cOperandSequenceParserRuleCall_5_2_0; }
		
		//{NextEProperty} 'next_e' operand=BooleanOrOCLLiteral
		public Group getGroup_6() { return cGroup_6; }
		
		//{NextEProperty}
		public Action getNextEPropertyAction_6_0() { return cNextEPropertyAction_6_0; }
		
		//'next_e'
		public Keyword getNext_eKeyword_6_1() { return cNext_eKeyword_6_1; }
		
		//operand=BooleanOrOCLLiteral
		public Assignment getOperandAssignment_6_2() { return cOperandAssignment_6_2; }
		
		//BooleanOrOCLLiteral
		public RuleCall getOperandBooleanOrOCLLiteralParserRuleCall_6_2_0() { return cOperandBooleanOrOCLLiteralParserRuleCall_6_2_0; }
		
		//{EventuallyBooleanProperty} 'eventually!' operand=BooleanOrOCLLiteral
		public Group getGroup_7() { return cGroup_7; }
		
		//{EventuallyBooleanProperty}
		public Action getEventuallyBooleanPropertyAction_7_0() { return cEventuallyBooleanPropertyAction_7_0; }
		
		//'eventually!'
		public Keyword getEventuallyKeyword_7_1() { return cEventuallyKeyword_7_1; }
		
		//operand=BooleanOrOCLLiteral
		public Assignment getOperandAssignment_7_2() { return cOperandAssignment_7_2; }
		
		//BooleanOrOCLLiteral
		public RuleCall getOperandBooleanOrOCLLiteralParserRuleCall_7_2_0() { return cOperandBooleanOrOCLLiteralParserRuleCall_7_2_0; }
		
		//{EventuallySequenceProperty} 'eventually!' operand=Sequence
		public Group getGroup_8() { return cGroup_8; }
		
		//{EventuallySequenceProperty}
		public Action getEventuallySequencePropertyAction_8_0() { return cEventuallySequencePropertyAction_8_0; }
		
		//'eventually!'
		public Keyword getEventuallyKeyword_8_1() { return cEventuallyKeyword_8_1; }
		
		//operand=Sequence
		public Assignment getOperandAssignment_8_2() { return cOperandAssignment_8_2; }
		
		//Sequence
		public RuleCall getOperandSequenceParserRuleCall_8_2_0() { return cOperandSequenceParserRuleCall_8_2_0; }
	}
	public class BinaryPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BinaryProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOrBooleanPropertyPropertyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLeftAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLeftBooleanOrOCLLiteralParserRuleCall_0_1_0 = (RuleCall)cLeftAssignment_0_1.eContents().get(0);
		private final Keyword cOrKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cRightAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRightPropertyParserRuleCall_0_3_0 = (RuleCall)cRightAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cImpliesPropertyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLeftAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLeftBooleanOrOCLLiteralParserRuleCall_1_1_0 = (RuleCall)cLeftAssignment_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightPropertyParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cEquivalencePropertyAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cLeftAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLeftBooleanOrOCLLiteralParserRuleCall_2_1_0 = (RuleCall)cLeftAssignment_2_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cRightAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRightBooleanOrOCLLiteralParserRuleCall_2_3_0 = (RuleCall)cRightAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cOverlappingUntilPropertyAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cLeftAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLeftBooleanOrOCLLiteralParserRuleCall_3_1_0 = (RuleCall)cLeftAssignment_3_1.eContents().get(0);
		private final Keyword cUntil_Keyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cRightAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cRightBooleanOrOCLLiteralParserRuleCall_3_3_0 = (RuleCall)cRightAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBeforePropertyAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cLeftAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLeftBooleanOrOCLLiteralParserRuleCall_4_1_0 = (RuleCall)cLeftAssignment_4_1.eContents().get(0);
		private final Keyword cBeforeKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cRightAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cRightBooleanOrOCLLiteralParserRuleCall_4_3_0 = (RuleCall)cRightAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cSuffixImplicationPropertyAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cLeftAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLeftSequenceParserRuleCall_5_1_0 = (RuleCall)cLeftAssignment_5_1.eContents().get(0);
		private final Keyword cVerticalLineEqualsSignGreaterThanSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cRightAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cRightPropertyParserRuleCall_5_3_0 = (RuleCall)cRightAssignment_5_3.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cOverlappingSuffixImplicationPropertyAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cLeftAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLeftSequenceParserRuleCall_6_1_0 = (RuleCall)cLeftAssignment_6_1.eContents().get(0);
		private final Keyword cVerticalLineHyphenMinusGreaterThanSignKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cRightAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cRightPropertyParserRuleCall_6_3_0 = (RuleCall)cRightAssignment_6_3.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cNextEventAPropertyAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cNext_event_aKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cLeftAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cLeftBooleanOrOCLLiteralParserRuleCall_7_3_0 = (RuleCall)cLeftAssignment_7_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Assignment cRangeAssignment_7_6 = (Assignment)cGroup_7.eContents().get(6);
		private final RuleCall cRangeRangeParserRuleCall_7_6_0 = (RuleCall)cRangeAssignment_7_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_7 = (Keyword)cGroup_7.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_8 = (Keyword)cGroup_7.eContents().get(8);
		private final Assignment cRightAssignment_7_9 = (Assignment)cGroup_7.eContents().get(9);
		private final RuleCall cRightPropertyParserRuleCall_7_9_0 = (RuleCall)cRightAssignment_7_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_10 = (Keyword)cGroup_7.eContents().get(10);
		
		//BinaryProperty:
		//	{OrBooleanPropertyProperty} left=BooleanOrOCLLiteral 'or' right=Property
		//	| {ImpliesProperty} left=BooleanOrOCLLiteral '->' right=Property
		//	| {EquivalenceProperty} left=BooleanOrOCLLiteral '<->' right=BooleanOrOCLLiteral
		//	| {OverlappingUntilProperty} left=BooleanOrOCLLiteral 'until_' right=BooleanOrOCLLiteral
		//	| {BeforeProperty} left=BooleanOrOCLLiteral 'before' right=BooleanOrOCLLiteral
		//	| {SuffixImplicationProperty} left=Sequence '|=>' right=Property
		//	| {OverlappingSuffixImplicationProperty} left=Sequence '|->' right=Property
		//	| {NextEventAProperty} 'next_event_a' '(' left=BooleanOrOCLLiteral ')' '[' range=Range ']' '(' right=Property ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{OrBooleanPropertyProperty} left=BooleanOrOCLLiteral 'or' right=Property | {ImpliesProperty} left=BooleanOrOCLLiteral
		//'->' right=Property | {EquivalenceProperty} left=BooleanOrOCLLiteral '<->' right=BooleanOrOCLLiteral |
		//{OverlappingUntilProperty} left=BooleanOrOCLLiteral 'until_' right=BooleanOrOCLLiteral | {BeforeProperty}
		//left=BooleanOrOCLLiteral 'before' right=BooleanOrOCLLiteral | {SuffixImplicationProperty} left=Sequence '|=>'
		//right=Property | {OverlappingSuffixImplicationProperty} left=Sequence '|->' right=Property | {NextEventAProperty}
		//'next_event_a' '(' left=BooleanOrOCLLiteral ')' '[' range=Range ']' '(' right=Property ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{OrBooleanPropertyProperty} left=BooleanOrOCLLiteral 'or' right=Property
		public Group getGroup_0() { return cGroup_0; }
		
		//{OrBooleanPropertyProperty}
		public Action getOrBooleanPropertyPropertyAction_0_0() { return cOrBooleanPropertyPropertyAction_0_0; }
		
		//left=BooleanOrOCLLiteral
		public Assignment getLeftAssignment_0_1() { return cLeftAssignment_0_1; }
		
		//BooleanOrOCLLiteral
		public RuleCall getLeftBooleanOrOCLLiteralParserRuleCall_0_1_0() { return cLeftBooleanOrOCLLiteralParserRuleCall_0_1_0; }
		
		//'or'
		public Keyword getOrKeyword_0_2() { return cOrKeyword_0_2; }
		
		//right=Property
		public Assignment getRightAssignment_0_3() { return cRightAssignment_0_3; }
		
		//Property
		public RuleCall getRightPropertyParserRuleCall_0_3_0() { return cRightPropertyParserRuleCall_0_3_0; }
		
		//{ImpliesProperty} left=BooleanOrOCLLiteral '->' right=Property
		public Group getGroup_1() { return cGroup_1; }
		
		//{ImpliesProperty}
		public Action getImpliesPropertyAction_1_0() { return cImpliesPropertyAction_1_0; }
		
		//left=BooleanOrOCLLiteral
		public Assignment getLeftAssignment_1_1() { return cLeftAssignment_1_1; }
		
		//BooleanOrOCLLiteral
		public RuleCall getLeftBooleanOrOCLLiteralParserRuleCall_1_1_0() { return cLeftBooleanOrOCLLiteralParserRuleCall_1_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_2() { return cHyphenMinusGreaterThanSignKeyword_1_2; }
		
		//right=Property
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }
		
		//Property
		public RuleCall getRightPropertyParserRuleCall_1_3_0() { return cRightPropertyParserRuleCall_1_3_0; }
		
		//{EquivalenceProperty} left=BooleanOrOCLLiteral '<->' right=BooleanOrOCLLiteral
		public Group getGroup_2() { return cGroup_2; }
		
		//{EquivalenceProperty}
		public Action getEquivalencePropertyAction_2_0() { return cEquivalencePropertyAction_2_0; }
		
		//left=BooleanOrOCLLiteral
		public Assignment getLeftAssignment_2_1() { return cLeftAssignment_2_1; }
		
		//BooleanOrOCLLiteral
		public RuleCall getLeftBooleanOrOCLLiteralParserRuleCall_2_1_0() { return cLeftBooleanOrOCLLiteralParserRuleCall_2_1_0; }
		
		//'<->'
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_2_2() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_2_2; }
		
		//right=BooleanOrOCLLiteral
		public Assignment getRightAssignment_2_3() { return cRightAssignment_2_3; }
		
		//BooleanOrOCLLiteral
		public RuleCall getRightBooleanOrOCLLiteralParserRuleCall_2_3_0() { return cRightBooleanOrOCLLiteralParserRuleCall_2_3_0; }
		
		//{OverlappingUntilProperty} left=BooleanOrOCLLiteral 'until_' right=BooleanOrOCLLiteral
		public Group getGroup_3() { return cGroup_3; }
		
		//{OverlappingUntilProperty}
		public Action getOverlappingUntilPropertyAction_3_0() { return cOverlappingUntilPropertyAction_3_0; }
		
		//left=BooleanOrOCLLiteral
		public Assignment getLeftAssignment_3_1() { return cLeftAssignment_3_1; }
		
		//BooleanOrOCLLiteral
		public RuleCall getLeftBooleanOrOCLLiteralParserRuleCall_3_1_0() { return cLeftBooleanOrOCLLiteralParserRuleCall_3_1_0; }
		
		//'until_'
		public Keyword getUntil_Keyword_3_2() { return cUntil_Keyword_3_2; }
		
		//right=BooleanOrOCLLiteral
		public Assignment getRightAssignment_3_3() { return cRightAssignment_3_3; }
		
		//BooleanOrOCLLiteral
		public RuleCall getRightBooleanOrOCLLiteralParserRuleCall_3_3_0() { return cRightBooleanOrOCLLiteralParserRuleCall_3_3_0; }
		
		//{BeforeProperty} left=BooleanOrOCLLiteral 'before' right=BooleanOrOCLLiteral
		public Group getGroup_4() { return cGroup_4; }
		
		//{BeforeProperty}
		public Action getBeforePropertyAction_4_0() { return cBeforePropertyAction_4_0; }
		
		//left=BooleanOrOCLLiteral
		public Assignment getLeftAssignment_4_1() { return cLeftAssignment_4_1; }
		
		//BooleanOrOCLLiteral
		public RuleCall getLeftBooleanOrOCLLiteralParserRuleCall_4_1_0() { return cLeftBooleanOrOCLLiteralParserRuleCall_4_1_0; }
		
		//'before'
		public Keyword getBeforeKeyword_4_2() { return cBeforeKeyword_4_2; }
		
		//right=BooleanOrOCLLiteral
		public Assignment getRightAssignment_4_3() { return cRightAssignment_4_3; }
		
		//BooleanOrOCLLiteral
		public RuleCall getRightBooleanOrOCLLiteralParserRuleCall_4_3_0() { return cRightBooleanOrOCLLiteralParserRuleCall_4_3_0; }
		
		//{SuffixImplicationProperty} left=Sequence '|=>' right=Property
		public Group getGroup_5() { return cGroup_5; }
		
		//{SuffixImplicationProperty}
		public Action getSuffixImplicationPropertyAction_5_0() { return cSuffixImplicationPropertyAction_5_0; }
		
		//left=Sequence
		public Assignment getLeftAssignment_5_1() { return cLeftAssignment_5_1; }
		
		//Sequence
		public RuleCall getLeftSequenceParserRuleCall_5_1_0() { return cLeftSequenceParserRuleCall_5_1_0; }
		
		//'|=>'
		public Keyword getVerticalLineEqualsSignGreaterThanSignKeyword_5_2() { return cVerticalLineEqualsSignGreaterThanSignKeyword_5_2; }
		
		//right=Property
		public Assignment getRightAssignment_5_3() { return cRightAssignment_5_3; }
		
		//Property
		public RuleCall getRightPropertyParserRuleCall_5_3_0() { return cRightPropertyParserRuleCall_5_3_0; }
		
		//{OverlappingSuffixImplicationProperty} left=Sequence '|->' right=Property
		public Group getGroup_6() { return cGroup_6; }
		
		//{OverlappingSuffixImplicationProperty}
		public Action getOverlappingSuffixImplicationPropertyAction_6_0() { return cOverlappingSuffixImplicationPropertyAction_6_0; }
		
		//left=Sequence
		public Assignment getLeftAssignment_6_1() { return cLeftAssignment_6_1; }
		
		//Sequence
		public RuleCall getLeftSequenceParserRuleCall_6_1_0() { return cLeftSequenceParserRuleCall_6_1_0; }
		
		//'|->'
		public Keyword getVerticalLineHyphenMinusGreaterThanSignKeyword_6_2() { return cVerticalLineHyphenMinusGreaterThanSignKeyword_6_2; }
		
		//right=Property
		public Assignment getRightAssignment_6_3() { return cRightAssignment_6_3; }
		
		//Property
		public RuleCall getRightPropertyParserRuleCall_6_3_0() { return cRightPropertyParserRuleCall_6_3_0; }
		
		//{NextEventAProperty} 'next_event_a' '(' left=BooleanOrOCLLiteral ')' '[' range=Range ']' '(' right=Property ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//{NextEventAProperty}
		public Action getNextEventAPropertyAction_7_0() { return cNextEventAPropertyAction_7_0; }
		
		//'next_event_a'
		public Keyword getNext_event_aKeyword_7_1() { return cNext_event_aKeyword_7_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }
		
		//left=BooleanOrOCLLiteral
		public Assignment getLeftAssignment_7_3() { return cLeftAssignment_7_3; }
		
		//BooleanOrOCLLiteral
		public RuleCall getLeftBooleanOrOCLLiteralParserRuleCall_7_3_0() { return cLeftBooleanOrOCLLiteralParserRuleCall_7_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7_5() { return cLeftSquareBracketKeyword_7_5; }
		
		//range=Range
		public Assignment getRangeAssignment_7_6() { return cRangeAssignment_7_6; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_7_6_0() { return cRangeRangeParserRuleCall_7_6_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7_7() { return cRightSquareBracketKeyword_7_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_8() { return cLeftParenthesisKeyword_7_8; }
		
		//right=Property
		public Assignment getRightAssignment_7_9() { return cRightAssignment_7_9; }
		
		//Property
		public RuleCall getRightPropertyParserRuleCall_7_9_0() { return cRightPropertyParserRuleCall_7_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_10() { return cRightParenthesisKeyword_7_10; }
	}
	public class BooleanOrOCLLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BooleanOrOCLLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNotBooleanOrOCLLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNotKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cLiteralAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLiteralBooleanOrOCLLiteralParserRuleCall_0_2_0 = (RuleCall)cLiteralAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBooleanLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLiteralAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLiteralBooleanLiteralExpCSParserRuleCall_1_1_0 = (RuleCall)cLiteralAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOCLLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cOclKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLiteralAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cLiteralConstraintCSCrossReference_2_2_0 = (CrossReference)cLiteralAssignment_2_2.eContents().get(0);
		private final RuleCall cLiteralConstraintCSIDParserRuleCall_2_2_0_1 = (RuleCall)cLiteralConstraintCSCrossReference_2_2_0.eContents().get(1);
		
		//BooleanOrOCLLiteral:
		//	{NotBooleanOrOCLLiteral} 'not' literal=BooleanOrOCLLiteral
		//	| {BooleanLiteral} literal=BooleanLiteralExpCS
		//	| {OCLLiteral} 'ocl' literal=[base::ConstraintCS];
		@Override public ParserRule getRule() { return rule; }
		
		//{NotBooleanOrOCLLiteral} 'not' literal=BooleanOrOCLLiteral | {BooleanLiteral} literal=BooleanLiteralExpCS | {OCLLiteral}
		//'ocl' literal=[base::ConstraintCS]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{NotBooleanOrOCLLiteral} 'not' literal=BooleanOrOCLLiteral
		public Group getGroup_0() { return cGroup_0; }
		
		//{NotBooleanOrOCLLiteral}
		public Action getNotBooleanOrOCLLiteralAction_0_0() { return cNotBooleanOrOCLLiteralAction_0_0; }
		
		//'not'
		public Keyword getNotKeyword_0_1() { return cNotKeyword_0_1; }
		
		//literal=BooleanOrOCLLiteral
		public Assignment getLiteralAssignment_0_2() { return cLiteralAssignment_0_2; }
		
		//BooleanOrOCLLiteral
		public RuleCall getLiteralBooleanOrOCLLiteralParserRuleCall_0_2_0() { return cLiteralBooleanOrOCLLiteralParserRuleCall_0_2_0; }
		
		//{BooleanLiteral} literal=BooleanLiteralExpCS
		public Group getGroup_1() { return cGroup_1; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_1_0() { return cBooleanLiteralAction_1_0; }
		
		//literal=BooleanLiteralExpCS
		public Assignment getLiteralAssignment_1_1() { return cLiteralAssignment_1_1; }
		
		//BooleanLiteralExpCS
		public RuleCall getLiteralBooleanLiteralExpCSParserRuleCall_1_1_0() { return cLiteralBooleanLiteralExpCSParserRuleCall_1_1_0; }
		
		//{OCLLiteral} 'ocl' literal=[base::ConstraintCS]
		public Group getGroup_2() { return cGroup_2; }
		
		//{OCLLiteral}
		public Action getOCLLiteralAction_2_0() { return cOCLLiteralAction_2_0; }
		
		//'ocl'
		public Keyword getOclKeyword_2_1() { return cOclKeyword_2_1; }
		
		//literal=[base::ConstraintCS]
		public Assignment getLiteralAssignment_2_2() { return cLiteralAssignment_2_2; }
		
		//[base::ConstraintCS]
		public CrossReference getLiteralConstraintCSCrossReference_2_2_0() { return cLiteralConstraintCSCrossReference_2_2_0; }
		
		//ID
		public RuleCall getLiteralConstraintCSIDParserRuleCall_2_2_0_1() { return cLiteralConstraintCSIDParserRuleCall_2_2_0_1; }
	}
	public class SEREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SERE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleSEREParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFusionSEREAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cHdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cHdSimpleSEREParserRuleCall_1_1_0 = (RuleCall)cHdAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTlAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTlSimpleSEREParserRuleCall_1_3_0 = (RuleCall)cTlAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cConcatenationSEREAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cHdAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cHdSimpleSEREParserRuleCall_2_1_0 = (RuleCall)cHdAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cTlAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cTlSimpleSEREParserRuleCall_2_3_0 = (RuleCall)cTlAssignment_2_3.eContents().get(0);
		
		//SERE:
		//	SimpleSERE
		//	| {FusionSERE} hd=SimpleSERE ':' tl=SimpleSERE
		//	| {ConcatenationSERE} hd=SimpleSERE ';' tl=SimpleSERE;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleSERE | {FusionSERE} hd=SimpleSERE ':' tl=SimpleSERE | {ConcatenationSERE} hd=SimpleSERE ';' tl=SimpleSERE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleSERE
		public RuleCall getSimpleSEREParserRuleCall_0() { return cSimpleSEREParserRuleCall_0; }
		
		//{FusionSERE} hd=SimpleSERE ':' tl=SimpleSERE
		public Group getGroup_1() { return cGroup_1; }
		
		//{FusionSERE}
		public Action getFusionSEREAction_1_0() { return cFusionSEREAction_1_0; }
		
		//hd=SimpleSERE
		public Assignment getHdAssignment_1_1() { return cHdAssignment_1_1; }
		
		//SimpleSERE
		public RuleCall getHdSimpleSEREParserRuleCall_1_1_0() { return cHdSimpleSEREParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//tl=SimpleSERE
		public Assignment getTlAssignment_1_3() { return cTlAssignment_1_3; }
		
		//SimpleSERE
		public RuleCall getTlSimpleSEREParserRuleCall_1_3_0() { return cTlSimpleSEREParserRuleCall_1_3_0; }
		
		//{ConcatenationSERE} hd=SimpleSERE ';' tl=SimpleSERE
		public Group getGroup_2() { return cGroup_2; }
		
		//{ConcatenationSERE}
		public Action getConcatenationSEREAction_2_0() { return cConcatenationSEREAction_2_0; }
		
		//hd=SimpleSERE
		public Assignment getHdAssignment_2_1() { return cHdAssignment_2_1; }
		
		//SimpleSERE
		public RuleCall getHdSimpleSEREParserRuleCall_2_1_0() { return cHdSimpleSEREParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_2() { return cSemicolonKeyword_2_2; }
		
		//tl=SimpleSERE
		public Assignment getTlAssignment_2_3() { return cTlAssignment_2_3; }
		
		//SimpleSERE
		public RuleCall getTlSimpleSEREParserRuleCall_2_3_0() { return cTlSimpleSEREParserRuleCall_2_3_0; }
	}
	public class SimpleSEREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SimpleSERE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanOrOCLLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSequenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompoundSEREParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SimpleSERE:
		//	BooleanOrOCLLiteral
		//	| Sequence
		//	| CompoundSERE
		//	//	| Clocked_SERE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanOrOCLLiteral | Sequence | CompoundSERE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanOrOCLLiteral
		public RuleCall getBooleanOrOCLLiteralParserRuleCall_0() { return cBooleanOrOCLLiteralParserRuleCall_0; }
		
		//Sequence
		public RuleCall getSequenceParserRuleCall_1() { return cSequenceParserRuleCall_1; }
		
		//CompoundSERE
		public RuleCall getCompoundSEREParserRuleCall_2() { return cCompoundSEREParserRuleCall_2; }
	}
	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Sequence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBracedSEREParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRepeatedSEREParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Sequence:
		//	BracedSERE | RepeatedSERE;
		@Override public ParserRule getRule() { return rule; }
		
		//BracedSERE | RepeatedSERE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BracedSERE
		public RuleCall getBracedSEREParserRuleCall_0() { return cBracedSEREParserRuleCall_0; }
		
		//RepeatedSERE
		public RuleCall getRepeatedSEREParserRuleCall_1() { return cRepeatedSEREParserRuleCall_1; }
	}
	public class RepeatedSEREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RepeatedSERE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanCountedConsecutiveRepetitionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionBooleanOrOCLLiteralParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cAsteriskKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cCountAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cCountCountParserRuleCall_0_4_0 = (RuleCall)cCountAssignment_0_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSequenceCountedConsecutiveRepetitionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionBracedSEREParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cAsteriskKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cCountAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cCountCountParserRuleCall_1_4_0 = (RuleCall)cCountAssignment_1_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSequenceCountedConsecutiveRepetitionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionRepeatedSEREParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cAsteriskKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cCountAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cCountCountParserRuleCall_2_5_0 = (RuleCall)cCountAssignment_2_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_2_7 = (Keyword)cGroup_2.eContents().get(7);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBooleanConsecutiveRepetitionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionBooleanOrOCLLiteralParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cPlusSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cSequenceConsecutiveRepetitionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExpressionBracedSEREParserRuleCall_4_1_0 = (RuleCall)cExpressionAssignment_4_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cPlusSignKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cSequenceConsecutiveRepetitionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cExpressionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cExpressionRepeatedSEREParserRuleCall_5_2_0 = (RuleCall)cExpressionAssignment_5_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cPlusSignKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cBooleanCountedNonConsecutiveRepetitionAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cExpressionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExpressionBooleanOrOCLLiteralParserRuleCall_6_1_0 = (RuleCall)cExpressionAssignment_6_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cEqualsSignKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cCountAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cCountCountParserRuleCall_6_4_0 = (RuleCall)cCountAssignment_6_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_5 = (Keyword)cGroup_6.eContents().get(5);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cBooleanCountedGotoRepetitionAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cExpressionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExpressionBooleanOrOCLLiteralParserRuleCall_7_1_0 = (RuleCall)cExpressionAssignment_7_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Assignment cCountAssignment_7_4 = (Assignment)cGroup_7.eContents().get(4);
		private final RuleCall cCountCountParserRuleCall_7_4_0 = (RuleCall)cCountAssignment_7_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cWildCardAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cAsteriskKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cCountAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cCountCountParserRuleCall_8_3_0 = (RuleCall)cCountAssignment_8_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cLengthOneAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cPlusSignKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		
		//RepeatedSERE:
		//	{BooleanCountedConsecutiveRepetition} expression=BooleanOrOCLLiteral '[' '*' count=Count? ']'
		//	| {SequenceCountedConsecutiveRepetition} expression=BracedSERE '[' '*' count=Count? ']'
		//	| {SequenceCountedConsecutiveRepetition} '(' expression=RepeatedSERE '[' '*' count=Count? ']' ')'
		//	| {BooleanConsecutiveRepetition} expression=BooleanOrOCLLiteral '[' '+' ']'
		//	| {SequenceConsecutiveRepetition} expression=BracedSERE '[' '+' ']'
		//	| {SequenceConsecutiveRepetition} '(' expression=RepeatedSERE '[' '+' ']' ')'
		//	| {BooleanCountedNonConsecutiveRepetition} expression=BooleanOrOCLLiteral '[' '=' count=Count ']'
		//	| {BooleanCountedGotoRepetition} expression=BooleanOrOCLLiteral '[' '->' count=Count? ']'
		//	| {WildCard} '[' '*' count=Count? ']'
		//	| {LengthOne} '[' '+' ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanCountedConsecutiveRepetition} expression=BooleanOrOCLLiteral '[' '*' count=Count? ']' |
		//{SequenceCountedConsecutiveRepetition} expression=BracedSERE '[' '*' count=Count? ']' |
		//{SequenceCountedConsecutiveRepetition} '(' expression=RepeatedSERE '[' '*' count=Count? ']' ')' |
		//{BooleanConsecutiveRepetition} expression=BooleanOrOCLLiteral '[' '+' ']' | {SequenceConsecutiveRepetition}
		//expression=BracedSERE '[' '+' ']' | {SequenceConsecutiveRepetition} '(' expression=RepeatedSERE '[' '+' ']' ')' |
		//{BooleanCountedNonConsecutiveRepetition} expression=BooleanOrOCLLiteral '[' '=' count=Count ']' |
		//{BooleanCountedGotoRepetition} expression=BooleanOrOCLLiteral '[' '->' count=Count? ']' | {WildCard} '[' '*'
		//count=Count? ']' | {LengthOne} '[' '+' ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BooleanCountedConsecutiveRepetition} expression=BooleanOrOCLLiteral '[' '*' count=Count? ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//{BooleanCountedConsecutiveRepetition}
		public Action getBooleanCountedConsecutiveRepetitionAction_0_0() { return cBooleanCountedConsecutiveRepetitionAction_0_0; }
		
		//expression=BooleanOrOCLLiteral
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//BooleanOrOCLLiteral
		public RuleCall getExpressionBooleanOrOCLLiteralParserRuleCall_0_1_0() { return cExpressionBooleanOrOCLLiteralParserRuleCall_0_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_2() { return cLeftSquareBracketKeyword_0_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_3() { return cAsteriskKeyword_0_3; }
		
		//count=Count?
		public Assignment getCountAssignment_0_4() { return cCountAssignment_0_4; }
		
		//Count
		public RuleCall getCountCountParserRuleCall_0_4_0() { return cCountCountParserRuleCall_0_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_5() { return cRightSquareBracketKeyword_0_5; }
		
		//{SequenceCountedConsecutiveRepetition} expression=BracedSERE '[' '*' count=Count? ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//{SequenceCountedConsecutiveRepetition}
		public Action getSequenceCountedConsecutiveRepetitionAction_1_0() { return cSequenceCountedConsecutiveRepetitionAction_1_0; }
		
		//expression=BracedSERE
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//BracedSERE
		public RuleCall getExpressionBracedSEREParserRuleCall_1_1_0() { return cExpressionBracedSEREParserRuleCall_1_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2() { return cLeftSquareBracketKeyword_1_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_3() { return cAsteriskKeyword_1_3; }
		
		//count=Count?
		public Assignment getCountAssignment_1_4() { return cCountAssignment_1_4; }
		
		//Count
		public RuleCall getCountCountParserRuleCall_1_4_0() { return cCountCountParserRuleCall_1_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_5() { return cRightSquareBracketKeyword_1_5; }
		
		//{SequenceCountedConsecutiveRepetition} '(' expression=RepeatedSERE '[' '*' count=Count? ']' ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{SequenceCountedConsecutiveRepetition}
		public Action getSequenceCountedConsecutiveRepetitionAction_2_0() { return cSequenceCountedConsecutiveRepetitionAction_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//expression=RepeatedSERE
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//RepeatedSERE
		public RuleCall getExpressionRepeatedSEREParserRuleCall_2_2_0() { return cExpressionRepeatedSEREParserRuleCall_2_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_3() { return cLeftSquareBracketKeyword_2_3; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_4() { return cAsteriskKeyword_2_4; }
		
		//count=Count?
		public Assignment getCountAssignment_2_5() { return cCountAssignment_2_5; }
		
		//Count
		public RuleCall getCountCountParserRuleCall_2_5_0() { return cCountCountParserRuleCall_2_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_6() { return cRightSquareBracketKeyword_2_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_7() { return cRightParenthesisKeyword_2_7; }
		
		//{BooleanConsecutiveRepetition} expression=BooleanOrOCLLiteral '[' '+' ']'
		public Group getGroup_3() { return cGroup_3; }
		
		//{BooleanConsecutiveRepetition}
		public Action getBooleanConsecutiveRepetitionAction_3_0() { return cBooleanConsecutiveRepetitionAction_3_0; }
		
		//expression=BooleanOrOCLLiteral
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }
		
		//BooleanOrOCLLiteral
		public RuleCall getExpressionBooleanOrOCLLiteralParserRuleCall_3_1_0() { return cExpressionBooleanOrOCLLiteralParserRuleCall_3_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_2() { return cLeftSquareBracketKeyword_3_2; }
		
		//'+'
		public Keyword getPlusSignKeyword_3_3() { return cPlusSignKeyword_3_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_4() { return cRightSquareBracketKeyword_3_4; }
		
		//{SequenceConsecutiveRepetition} expression=BracedSERE '[' '+' ']'
		public Group getGroup_4() { return cGroup_4; }
		
		//{SequenceConsecutiveRepetition}
		public Action getSequenceConsecutiveRepetitionAction_4_0() { return cSequenceConsecutiveRepetitionAction_4_0; }
		
		//expression=BracedSERE
		public Assignment getExpressionAssignment_4_1() { return cExpressionAssignment_4_1; }
		
		//BracedSERE
		public RuleCall getExpressionBracedSEREParserRuleCall_4_1_0() { return cExpressionBracedSEREParserRuleCall_4_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_2() { return cLeftSquareBracketKeyword_4_2; }
		
		//'+'
		public Keyword getPlusSignKeyword_4_3() { return cPlusSignKeyword_4_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_4() { return cRightSquareBracketKeyword_4_4; }
		
		//{SequenceConsecutiveRepetition} '(' expression=RepeatedSERE '[' '+' ']' ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//{SequenceConsecutiveRepetition}
		public Action getSequenceConsecutiveRepetitionAction_5_0() { return cSequenceConsecutiveRepetitionAction_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//expression=RepeatedSERE
		public Assignment getExpressionAssignment_5_2() { return cExpressionAssignment_5_2; }
		
		//RepeatedSERE
		public RuleCall getExpressionRepeatedSEREParserRuleCall_5_2_0() { return cExpressionRepeatedSEREParserRuleCall_5_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_3() { return cLeftSquareBracketKeyword_5_3; }
		
		//'+'
		public Keyword getPlusSignKeyword_5_4() { return cPlusSignKeyword_5_4; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_5() { return cRightSquareBracketKeyword_5_5; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_6() { return cRightParenthesisKeyword_5_6; }
		
		//{BooleanCountedNonConsecutiveRepetition} expression=BooleanOrOCLLiteral '[' '=' count=Count ']'
		public Group getGroup_6() { return cGroup_6; }
		
		//{BooleanCountedNonConsecutiveRepetition}
		public Action getBooleanCountedNonConsecutiveRepetitionAction_6_0() { return cBooleanCountedNonConsecutiveRepetitionAction_6_0; }
		
		//expression=BooleanOrOCLLiteral
		public Assignment getExpressionAssignment_6_1() { return cExpressionAssignment_6_1; }
		
		//BooleanOrOCLLiteral
		public RuleCall getExpressionBooleanOrOCLLiteralParserRuleCall_6_1_0() { return cExpressionBooleanOrOCLLiteralParserRuleCall_6_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6_2() { return cLeftSquareBracketKeyword_6_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_3() { return cEqualsSignKeyword_6_3; }
		
		//count=Count
		public Assignment getCountAssignment_6_4() { return cCountAssignment_6_4; }
		
		//Count
		public RuleCall getCountCountParserRuleCall_6_4_0() { return cCountCountParserRuleCall_6_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6_5() { return cRightSquareBracketKeyword_6_5; }
		
		//{BooleanCountedGotoRepetition} expression=BooleanOrOCLLiteral '[' '->' count=Count? ']'
		public Group getGroup_7() { return cGroup_7; }
		
		//{BooleanCountedGotoRepetition}
		public Action getBooleanCountedGotoRepetitionAction_7_0() { return cBooleanCountedGotoRepetitionAction_7_0; }
		
		//expression=BooleanOrOCLLiteral
		public Assignment getExpressionAssignment_7_1() { return cExpressionAssignment_7_1; }
		
		//BooleanOrOCLLiteral
		public RuleCall getExpressionBooleanOrOCLLiteralParserRuleCall_7_1_0() { return cExpressionBooleanOrOCLLiteralParserRuleCall_7_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7_2() { return cLeftSquareBracketKeyword_7_2; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_7_3() { return cHyphenMinusGreaterThanSignKeyword_7_3; }
		
		//count=Count?
		public Assignment getCountAssignment_7_4() { return cCountAssignment_7_4; }
		
		//Count
		public RuleCall getCountCountParserRuleCall_7_4_0() { return cCountCountParserRuleCall_7_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7_5() { return cRightSquareBracketKeyword_7_5; }
		
		//{WildCard} '[' '*' count=Count? ']'
		public Group getGroup_8() { return cGroup_8; }
		
		//{WildCard}
		public Action getWildCardAction_8_0() { return cWildCardAction_8_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_8_1() { return cLeftSquareBracketKeyword_8_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_8_2() { return cAsteriskKeyword_8_2; }
		
		//count=Count?
		public Assignment getCountAssignment_8_3() { return cCountAssignment_8_3; }
		
		//Count
		public RuleCall getCountCountParserRuleCall_8_3_0() { return cCountCountParserRuleCall_8_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8_4() { return cRightSquareBracketKeyword_8_4; }
		
		//{LengthOne} '[' '+' ']'
		public Group getGroup_9() { return cGroup_9; }
		
		//{LengthOne}
		public Action getLengthOneAction_9_0() { return cLengthOneAction_9_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_9_1() { return cLeftSquareBracketKeyword_9_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_9_2() { return cPlusSignKeyword_9_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_9_3() { return cRightSquareBracketKeyword_9_3; }
	}
	public class BracedSEREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BracedSERE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSEREParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BracedSERE:
		//	'{' expression=SERE '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' expression=SERE '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//expression=SERE
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//SERE
		public RuleCall getExpressionSEREParserRuleCall_1_0() { return cExpressionSEREParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class CompoundSEREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CompoundSERE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRepeatedSEREParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBracedSEREParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBinaryCompoundSEREParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////Clocked_SERE:
		////	Braced_SERE '@' 
		////;
		//CompoundSERE:
		//	RepeatedSERE | BracedSERE | BinaryCompoundSERE
		//	//	| Parameterized_SERE | Clocked_SERE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RepeatedSERE | BracedSERE | BinaryCompoundSERE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RepeatedSERE
		public RuleCall getRepeatedSEREParserRuleCall_0() { return cRepeatedSEREParserRuleCall_0; }
		
		//BracedSERE
		public RuleCall getBracedSEREParserRuleCall_1() { return cBracedSEREParserRuleCall_1; }
		
		//BinaryCompoundSERE
		public RuleCall getBinaryCompoundSEREParserRuleCall_2() { return cBinaryCompoundSEREParserRuleCall_2; }
	}
	public class BinaryCompoundSEREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BinaryCompoundSERE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSEREOrAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cLeftAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cLeftRepeatedSEREParserRuleCall_0_1_0_0 = (RuleCall)cLeftAssignment_0_1_0.eContents().get(0);
		private final Assignment cLeftAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cLeftBracedSEREParserRuleCall_0_1_1_0 = (RuleCall)cLeftAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cAlternatives_0_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cLeftAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cLeftBinaryCompoundSEREParserRuleCall_0_1_2_1_0 = (RuleCall)cLeftAssignment_0_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2_2 = (Keyword)cGroup_0_1_2.eContents().get(2);
		private final Keyword cVerticalLineKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_0_3 = (Alternatives)cGroup_0.eContents().get(3);
		private final Assignment cRightAssignment_0_3_0 = (Assignment)cAlternatives_0_3.eContents().get(0);
		private final RuleCall cRightRepeatedSEREParserRuleCall_0_3_0_0 = (RuleCall)cRightAssignment_0_3_0.eContents().get(0);
		private final Assignment cRightAssignment_0_3_1 = (Assignment)cAlternatives_0_3.eContents().get(1);
		private final RuleCall cRightBracedSEREParserRuleCall_0_3_1_0 = (RuleCall)cRightAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_0_3_2 = (Group)cAlternatives_0_3.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_3_2_0 = (Keyword)cGroup_0_3_2.eContents().get(0);
		private final Assignment cRightAssignment_0_3_2_1 = (Assignment)cGroup_0_3_2.eContents().get(1);
		private final RuleCall cRightBinaryCompoundSEREParserRuleCall_0_3_2_1_0 = (RuleCall)cRightAssignment_0_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3_2_2 = (Keyword)cGroup_0_3_2.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSEREAndNLMAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cLeftAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cLeftRepeatedSEREParserRuleCall_1_1_0_0 = (RuleCall)cLeftAssignment_1_1_0.eContents().get(0);
		private final Assignment cLeftAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cLeftBracedSEREParserRuleCall_1_1_1_0 = (RuleCall)cLeftAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cAlternatives_1_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cLeftAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cLeftBinaryCompoundSEREParserRuleCall_1_1_2_1_0 = (RuleCall)cLeftAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2_2 = (Keyword)cGroup_1_1_2.eContents().get(2);
		private final Keyword cAmpersandKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final Assignment cRightAssignment_1_3_0 = (Assignment)cAlternatives_1_3.eContents().get(0);
		private final RuleCall cRightRepeatedSEREParserRuleCall_1_3_0_0 = (RuleCall)cRightAssignment_1_3_0.eContents().get(0);
		private final Assignment cRightAssignment_1_3_1 = (Assignment)cAlternatives_1_3.eContents().get(1);
		private final RuleCall cRightBracedSEREParserRuleCall_1_3_1_0 = (RuleCall)cRightAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_3_2 = (Group)cAlternatives_1_3.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_3_2_0 = (Keyword)cGroup_1_3_2.eContents().get(0);
		private final Assignment cRightAssignment_1_3_2_1 = (Assignment)cGroup_1_3_2.eContents().get(1);
		private final RuleCall cRightBinaryCompoundSEREParserRuleCall_1_3_2_1_0 = (RuleCall)cRightAssignment_1_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_2_2 = (Keyword)cGroup_1_3_2.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSEREAndLMAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cLeftAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cLeftRepeatedSEREParserRuleCall_2_1_0_0 = (RuleCall)cLeftAssignment_2_1_0.eContents().get(0);
		private final Assignment cLeftAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cLeftBracedSEREParserRuleCall_2_1_1_0 = (RuleCall)cLeftAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cAlternatives_2_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cLeftAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cLeftBinaryCompoundSEREParserRuleCall_2_1_2_1_0 = (RuleCall)cLeftAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_2_2 = (Keyword)cGroup_2_1_2.eContents().get(2);
		private final Keyword cAmpersandAmpersandKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_2_3 = (Alternatives)cGroup_2.eContents().get(3);
		private final Assignment cRightAssignment_2_3_0 = (Assignment)cAlternatives_2_3.eContents().get(0);
		private final RuleCall cRightRepeatedSEREParserRuleCall_2_3_0_0 = (RuleCall)cRightAssignment_2_3_0.eContents().get(0);
		private final Assignment cRightAssignment_2_3_1 = (Assignment)cAlternatives_2_3.eContents().get(1);
		private final RuleCall cRightBracedSEREParserRuleCall_2_3_1_0 = (RuleCall)cRightAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_2_3_2 = (Group)cAlternatives_2_3.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_3_2_0 = (Keyword)cGroup_2_3_2.eContents().get(0);
		private final Assignment cRightAssignment_2_3_2_1 = (Assignment)cGroup_2_3_2.eContents().get(1);
		private final RuleCall cRightBinaryCompoundSEREParserRuleCall_2_3_2_1_0 = (RuleCall)cRightAssignment_2_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3_2_2 = (Keyword)cGroup_2_3_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSEREWithinAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cLeftAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cLeftRepeatedSEREParserRuleCall_3_1_0_0 = (RuleCall)cLeftAssignment_3_1_0.eContents().get(0);
		private final Assignment cLeftAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cLeftBracedSEREParserRuleCall_3_1_1_0 = (RuleCall)cLeftAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cAlternatives_3_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Assignment cLeftAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cLeftBinaryCompoundSEREParserRuleCall_3_1_2_1_0 = (RuleCall)cLeftAssignment_3_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_2_2 = (Keyword)cGroup_3_1_2.eContents().get(2);
		private final Keyword cWithinKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Alternatives cAlternatives_3_3 = (Alternatives)cGroup_3.eContents().get(3);
		private final Assignment cRightAssignment_3_3_0 = (Assignment)cAlternatives_3_3.eContents().get(0);
		private final RuleCall cRightRepeatedSEREParserRuleCall_3_3_0_0 = (RuleCall)cRightAssignment_3_3_0.eContents().get(0);
		private final Assignment cRightAssignment_3_3_1 = (Assignment)cAlternatives_3_3.eContents().get(1);
		private final RuleCall cRightBracedSEREParserRuleCall_3_3_1_0 = (RuleCall)cRightAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_3_3_2 = (Group)cAlternatives_3_3.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3_3_2_0 = (Keyword)cGroup_3_3_2.eContents().get(0);
		private final Assignment cRightAssignment_3_3_2_1 = (Assignment)cGroup_3_3_2.eContents().get(1);
		private final RuleCall cRightBinaryCompoundSEREParserRuleCall_3_3_2_1_0 = (RuleCall)cRightAssignment_3_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3_2_2 = (Keyword)cGroup_3_3_2.eContents().get(2);
		
		//BinaryCompoundSERE:
		//	{SEREOr} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') '|' (right=RepeatedSERE |
		//	right=BracedSERE | '(' right=BinaryCompoundSERE ')') | {SEREAndNLM} (left=RepeatedSERE | left=BracedSERE | '('
		//	left=BinaryCompoundSERE ')') '&' (right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')') |
		//	{SEREAndLM} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') '&&' (right=RepeatedSERE |
		//	right=BracedSERE | '(' right=BinaryCompoundSERE ')') | {SEREWithin} (left=RepeatedSERE | left=BracedSERE | '('
		//	left=BinaryCompoundSERE ')') 'within' (right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{SEREOr} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') '|' (right=RepeatedSERE |
		//right=BracedSERE | '(' right=BinaryCompoundSERE ')') | {SEREAndNLM} (left=RepeatedSERE | left=BracedSERE | '('
		//left=BinaryCompoundSERE ')') '&' (right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')') |
		//{SEREAndLM} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') '&&' (right=RepeatedSERE |
		//right=BracedSERE | '(' right=BinaryCompoundSERE ')') | {SEREWithin} (left=RepeatedSERE | left=BracedSERE | '('
		//left=BinaryCompoundSERE ')') 'within' (right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SEREOr} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') '|' (right=RepeatedSERE |
		//right=BracedSERE | '(' right=BinaryCompoundSERE ')')
		public Group getGroup_0() { return cGroup_0; }
		
		//{SEREOr}
		public Action getSEREOrAction_0_0() { return cSEREOrAction_0_0; }
		
		//(left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')')
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//left=RepeatedSERE
		public Assignment getLeftAssignment_0_1_0() { return cLeftAssignment_0_1_0; }
		
		//RepeatedSERE
		public RuleCall getLeftRepeatedSEREParserRuleCall_0_1_0_0() { return cLeftRepeatedSEREParserRuleCall_0_1_0_0; }
		
		//left=BracedSERE
		public Assignment getLeftAssignment_0_1_1() { return cLeftAssignment_0_1_1; }
		
		//BracedSERE
		public RuleCall getLeftBracedSEREParserRuleCall_0_1_1_0() { return cLeftBracedSEREParserRuleCall_0_1_1_0; }
		
		//'(' left=BinaryCompoundSERE ')'
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_2_0() { return cLeftParenthesisKeyword_0_1_2_0; }
		
		//left=BinaryCompoundSERE
		public Assignment getLeftAssignment_0_1_2_1() { return cLeftAssignment_0_1_2_1; }
		
		//BinaryCompoundSERE
		public RuleCall getLeftBinaryCompoundSEREParserRuleCall_0_1_2_1_0() { return cLeftBinaryCompoundSEREParserRuleCall_0_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_2_2() { return cRightParenthesisKeyword_0_1_2_2; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0_2() { return cVerticalLineKeyword_0_2; }
		
		//(right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')')
		public Alternatives getAlternatives_0_3() { return cAlternatives_0_3; }
		
		//right=RepeatedSERE
		public Assignment getRightAssignment_0_3_0() { return cRightAssignment_0_3_0; }
		
		//RepeatedSERE
		public RuleCall getRightRepeatedSEREParserRuleCall_0_3_0_0() { return cRightRepeatedSEREParserRuleCall_0_3_0_0; }
		
		//right=BracedSERE
		public Assignment getRightAssignment_0_3_1() { return cRightAssignment_0_3_1; }
		
		//BracedSERE
		public RuleCall getRightBracedSEREParserRuleCall_0_3_1_0() { return cRightBracedSEREParserRuleCall_0_3_1_0; }
		
		//'(' right=BinaryCompoundSERE ')'
		public Group getGroup_0_3_2() { return cGroup_0_3_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_3_2_0() { return cLeftParenthesisKeyword_0_3_2_0; }
		
		//right=BinaryCompoundSERE
		public Assignment getRightAssignment_0_3_2_1() { return cRightAssignment_0_3_2_1; }
		
		//BinaryCompoundSERE
		public RuleCall getRightBinaryCompoundSEREParserRuleCall_0_3_2_1_0() { return cRightBinaryCompoundSEREParserRuleCall_0_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3_2_2() { return cRightParenthesisKeyword_0_3_2_2; }
		
		//{SEREAndNLM} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') '&' (right=RepeatedSERE |
		//right=BracedSERE | '(' right=BinaryCompoundSERE ')')
		public Group getGroup_1() { return cGroup_1; }
		
		//{SEREAndNLM}
		public Action getSEREAndNLMAction_1_0() { return cSEREAndNLMAction_1_0; }
		
		//(left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//left=RepeatedSERE
		public Assignment getLeftAssignment_1_1_0() { return cLeftAssignment_1_1_0; }
		
		//RepeatedSERE
		public RuleCall getLeftRepeatedSEREParserRuleCall_1_1_0_0() { return cLeftRepeatedSEREParserRuleCall_1_1_0_0; }
		
		//left=BracedSERE
		public Assignment getLeftAssignment_1_1_1() { return cLeftAssignment_1_1_1; }
		
		//BracedSERE
		public RuleCall getLeftBracedSEREParserRuleCall_1_1_1_0() { return cLeftBracedSEREParserRuleCall_1_1_1_0; }
		
		//'(' left=BinaryCompoundSERE ')'
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_2_0() { return cLeftParenthesisKeyword_1_1_2_0; }
		
		//left=BinaryCompoundSERE
		public Assignment getLeftAssignment_1_1_2_1() { return cLeftAssignment_1_1_2_1; }
		
		//BinaryCompoundSERE
		public RuleCall getLeftBinaryCompoundSEREParserRuleCall_1_1_2_1_0() { return cLeftBinaryCompoundSEREParserRuleCall_1_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2_2() { return cRightParenthesisKeyword_1_1_2_2; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_2() { return cAmpersandKeyword_1_2; }
		
		//(right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')')
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }
		
		//right=RepeatedSERE
		public Assignment getRightAssignment_1_3_0() { return cRightAssignment_1_3_0; }
		
		//RepeatedSERE
		public RuleCall getRightRepeatedSEREParserRuleCall_1_3_0_0() { return cRightRepeatedSEREParserRuleCall_1_3_0_0; }
		
		//right=BracedSERE
		public Assignment getRightAssignment_1_3_1() { return cRightAssignment_1_3_1; }
		
		//BracedSERE
		public RuleCall getRightBracedSEREParserRuleCall_1_3_1_0() { return cRightBracedSEREParserRuleCall_1_3_1_0; }
		
		//'(' right=BinaryCompoundSERE ')'
		public Group getGroup_1_3_2() { return cGroup_1_3_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3_2_0() { return cLeftParenthesisKeyword_1_3_2_0; }
		
		//right=BinaryCompoundSERE
		public Assignment getRightAssignment_1_3_2_1() { return cRightAssignment_1_3_2_1; }
		
		//BinaryCompoundSERE
		public RuleCall getRightBinaryCompoundSEREParserRuleCall_1_3_2_1_0() { return cRightBinaryCompoundSEREParserRuleCall_1_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3_2_2() { return cRightParenthesisKeyword_1_3_2_2; }
		
		//{SEREAndLM} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') '&&' (right=RepeatedSERE |
		//right=BracedSERE | '(' right=BinaryCompoundSERE ')')
		public Group getGroup_2() { return cGroup_2; }
		
		//{SEREAndLM}
		public Action getSEREAndLMAction_2_0() { return cSEREAndLMAction_2_0; }
		
		//(left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')')
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//left=RepeatedSERE
		public Assignment getLeftAssignment_2_1_0() { return cLeftAssignment_2_1_0; }
		
		//RepeatedSERE
		public RuleCall getLeftRepeatedSEREParserRuleCall_2_1_0_0() { return cLeftRepeatedSEREParserRuleCall_2_1_0_0; }
		
		//left=BracedSERE
		public Assignment getLeftAssignment_2_1_1() { return cLeftAssignment_2_1_1; }
		
		//BracedSERE
		public RuleCall getLeftBracedSEREParserRuleCall_2_1_1_0() { return cLeftBracedSEREParserRuleCall_2_1_1_0; }
		
		//'(' left=BinaryCompoundSERE ')'
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_2_0() { return cLeftParenthesisKeyword_2_1_2_0; }
		
		//left=BinaryCompoundSERE
		public Assignment getLeftAssignment_2_1_2_1() { return cLeftAssignment_2_1_2_1; }
		
		//BinaryCompoundSERE
		public RuleCall getLeftBinaryCompoundSEREParserRuleCall_2_1_2_1_0() { return cLeftBinaryCompoundSEREParserRuleCall_2_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_2_2() { return cRightParenthesisKeyword_2_1_2_2; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_2_2() { return cAmpersandAmpersandKeyword_2_2; }
		
		//(right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')')
		public Alternatives getAlternatives_2_3() { return cAlternatives_2_3; }
		
		//right=RepeatedSERE
		public Assignment getRightAssignment_2_3_0() { return cRightAssignment_2_3_0; }
		
		//RepeatedSERE
		public RuleCall getRightRepeatedSEREParserRuleCall_2_3_0_0() { return cRightRepeatedSEREParserRuleCall_2_3_0_0; }
		
		//right=BracedSERE
		public Assignment getRightAssignment_2_3_1() { return cRightAssignment_2_3_1; }
		
		//BracedSERE
		public RuleCall getRightBracedSEREParserRuleCall_2_3_1_0() { return cRightBracedSEREParserRuleCall_2_3_1_0; }
		
		//'(' right=BinaryCompoundSERE ')'
		public Group getGroup_2_3_2() { return cGroup_2_3_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_3_2_0() { return cLeftParenthesisKeyword_2_3_2_0; }
		
		//right=BinaryCompoundSERE
		public Assignment getRightAssignment_2_3_2_1() { return cRightAssignment_2_3_2_1; }
		
		//BinaryCompoundSERE
		public RuleCall getRightBinaryCompoundSEREParserRuleCall_2_3_2_1_0() { return cRightBinaryCompoundSEREParserRuleCall_2_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3_2_2() { return cRightParenthesisKeyword_2_3_2_2; }
		
		//{SEREWithin} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') 'within' (right=RepeatedSERE |
		//right=BracedSERE | '(' right=BinaryCompoundSERE ')')
		public Group getGroup_3() { return cGroup_3; }
		
		//{SEREWithin}
		public Action getSEREWithinAction_3_0() { return cSEREWithinAction_3_0; }
		
		//(left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')')
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//left=RepeatedSERE
		public Assignment getLeftAssignment_3_1_0() { return cLeftAssignment_3_1_0; }
		
		//RepeatedSERE
		public RuleCall getLeftRepeatedSEREParserRuleCall_3_1_0_0() { return cLeftRepeatedSEREParserRuleCall_3_1_0_0; }
		
		//left=BracedSERE
		public Assignment getLeftAssignment_3_1_1() { return cLeftAssignment_3_1_1; }
		
		//BracedSERE
		public RuleCall getLeftBracedSEREParserRuleCall_3_1_1_0() { return cLeftBracedSEREParserRuleCall_3_1_1_0; }
		
		//'(' left=BinaryCompoundSERE ')'
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1_2_0() { return cLeftParenthesisKeyword_3_1_2_0; }
		
		//left=BinaryCompoundSERE
		public Assignment getLeftAssignment_3_1_2_1() { return cLeftAssignment_3_1_2_1; }
		
		//BinaryCompoundSERE
		public RuleCall getLeftBinaryCompoundSEREParserRuleCall_3_1_2_1_0() { return cLeftBinaryCompoundSEREParserRuleCall_3_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_1_2_2() { return cRightParenthesisKeyword_3_1_2_2; }
		
		//'within'
		public Keyword getWithinKeyword_3_2() { return cWithinKeyword_3_2; }
		
		//(right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')')
		public Alternatives getAlternatives_3_3() { return cAlternatives_3_3; }
		
		//right=RepeatedSERE
		public Assignment getRightAssignment_3_3_0() { return cRightAssignment_3_3_0; }
		
		//RepeatedSERE
		public RuleCall getRightRepeatedSEREParserRuleCall_3_3_0_0() { return cRightRepeatedSEREParserRuleCall_3_3_0_0; }
		
		//right=BracedSERE
		public Assignment getRightAssignment_3_3_1() { return cRightAssignment_3_3_1; }
		
		//BracedSERE
		public RuleCall getRightBracedSEREParserRuleCall_3_3_1_0() { return cRightBracedSEREParserRuleCall_3_3_1_0; }
		
		//'(' right=BinaryCompoundSERE ')'
		public Group getGroup_3_3_2() { return cGroup_3_3_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_3_2_0() { return cLeftParenthesisKeyword_3_3_2_0; }
		
		//right=BinaryCompoundSERE
		public Assignment getRightAssignment_3_3_2_1() { return cRightAssignment_3_3_2_1; }
		
		//BinaryCompoundSERE
		public RuleCall getRightBinaryCompoundSEREParserRuleCall_3_3_2_1_0() { return cRightBinaryCompoundSEREParserRuleCall_3_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3_2_2() { return cRightParenthesisKeyword_3_3_2_2; }
	}
	public class CountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Count");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCOUNTAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCOUNTNUMBERParserRuleCall_0_0 = (RuleCall)cCOUNTAssignment_0.eContents().get(0);
		private final RuleCall cRangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Parameterized_SERE:
		////	'for' params=Parameters_Definition ':' operator=And_Or_SERE_Op '{' SERE=[SERE] '}'
		////;
		////Parameters_Definition:
		////	paramDef+=Parameter_Definition (',' paramDef+=Parameter_Definition)*
		////;
		////Parameter_Definition:
		////	PSL_Identifier Index_Range? 'in' Value_Set
		////;
		//Count:
		//	COUNT=NUMBER | Range;
		@Override public ParserRule getRule() { return rule; }
		
		//COUNT=NUMBER | Range
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//COUNT=NUMBER
		public Assignment getCOUNTAssignment_0() { return cCOUNTAssignment_0; }
		
		//NUMBER
		public RuleCall getCOUNTNUMBERParserRuleCall_0_0() { return cCOUNTNUMBERParserRuleCall_0_0; }
		
		//Range
		public RuleCall getRangeParserRuleCall_1() { return cRangeParserRuleCall_1; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLOWER_BOUNDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLOWER_BOUNDNUMBERParserRuleCall_0_0 = (RuleCall)cLOWER_BOUNDAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHIGHER_BOUNDAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHIGHER_BOUNDNUMBERParserRuleCall_2_0 = (RuleCall)cHIGHER_BOUNDAssignment_2.eContents().get(0);
		
		//Range:
		//	LOWER_BOUND=NUMBER ':' HIGHER_BOUND=NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//LOWER_BOUND=NUMBER ':' HIGHER_BOUND=NUMBER
		public Group getGroup() { return cGroup; }
		
		//LOWER_BOUND=NUMBER
		public Assignment getLOWER_BOUNDAssignment_0() { return cLOWER_BOUNDAssignment_0; }
		
		//NUMBER
		public RuleCall getLOWER_BOUNDNUMBERParserRuleCall_0_0() { return cLOWER_BOUNDNUMBERParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//HIGHER_BOUND=NUMBER
		public Assignment getHIGHER_BOUNDAssignment_2() { return cHIGHER_BOUNDAssignment_2; }
		
		//NUMBER
		public RuleCall getHIGHER_BOUNDNUMBERParserRuleCall_2_0() { return cHIGHER_BOUNDNUMBERParserRuleCall_2_0; }
	}
	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NUMBER");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NUMBER ecore::EInt:
		//	INT
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDParserRuleCall_0() { return cIDParserRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDParserRuleCall_1_1() { return cIDParserRuleCall_1_1; }
	}
	
	
	private final DocumentElements pDocument;
	private final ImportElements pImport;
	private final PropertyElements pProperty;
	private final UnaryPropertyElements pUnaryProperty;
	private final BinaryPropertyElements pBinaryProperty;
	private final BooleanOrOCLLiteralElements pBooleanOrOCLLiteral;
	private final SEREElements pSERE;
	private final SimpleSEREElements pSimpleSERE;
	private final SequenceElements pSequence;
	private final RepeatedSEREElements pRepeatedSERE;
	private final BracedSEREElements pBracedSERE;
	private final CompoundSEREElements pCompoundSERE;
	private final BinaryCompoundSEREElements pBinaryCompoundSERE;
	private final CountElements pCount;
	private final RangeElements pRange;
	private final NUMBERElements pNUMBER;
	private final TerminalRule tIMPORT_URI;
	private final TerminalRule tSCHEME;
	private final FQNElements pFQN;
	
	private final Grammar grammar;
	
	private final CompleteOCLGrammarAccess gaCompleteOCL;
	
	private final EssentialOCLGrammarAccess gaEssentialOCL;
	
	private final BaseGrammarAccess gaBase;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			CompleteOCLGrammarAccess gaCompleteOCL,
			EssentialOCLGrammarAccess gaEssentialOCL,
			BaseGrammarAccess gaBase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCompleteOCL = gaCompleteOCL;
		this.gaEssentialOCL = gaEssentialOCL;
		this.gaBase = gaBase;
		this.pDocument = new DocumentElements();
		this.pImport = new ImportElements();
		this.pProperty = new PropertyElements();
		this.pUnaryProperty = new UnaryPropertyElements();
		this.pBinaryProperty = new BinaryPropertyElements();
		this.pBooleanOrOCLLiteral = new BooleanOrOCLLiteralElements();
		this.pSERE = new SEREElements();
		this.pSimpleSERE = new SimpleSEREElements();
		this.pSequence = new SequenceElements();
		this.pRepeatedSERE = new RepeatedSEREElements();
		this.pBracedSERE = new BracedSEREElements();
		this.pCompoundSERE = new CompoundSEREElements();
		this.pBinaryCompoundSERE = new BinaryCompoundSEREElements();
		this.pCount = new CountElements();
		this.pRange = new RangeElements();
		this.pNUMBER = new NUMBERElements();
		this.tIMPORT_URI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IMPORT_URI");
		this.tSCHEME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SCHEME");
		this.pFQN = new FQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public CompleteOCLGrammarAccess getCompleteOCLGrammarAccess() {
		return gaCompleteOCL;
	}
	
	public EssentialOCLGrammarAccess getEssentialOCLGrammarAccess() {
		return gaEssentialOCL;
	}
	
	public BaseGrammarAccess getBaseGrammarAccess() {
		return gaBase;
	}

	
	//Document:
	//	ownedImports+=Import*
	//	//	('beginocl' ownedOCLDocument=CompleteOCLDocumentCS 'endocl')?
	//	ownedProperties+=Property+;
	public DocumentElements getDocumentAccess() {
		return pDocument;
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}
	
	//Import:
	//	'import' importURI=IMPORT_URI;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Property:
	//	{AndProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')')
	//	'and' right=Property
	//	| {OrPropertyBooleanProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '('
	//	left=BinaryProperty ')') 'or' right=Property
	//	| {AbortProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty
	//	')') 'abort' right=BooleanOrOCLLiteral
	//	| {UntilProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty
	//	')') 'until' right=BooleanOrOCLLiteral
	//	| UnaryProperty | BinaryProperty | '(' UnaryProperty ')' | '(' BinaryProperty ')';
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//UnaryProperty:
	//	{BooleanProperty} operand=BooleanOrOCLLiteral
	//	| {SequenceProperty} operand=Sequence
	//	| {SequenceTightProperty} operand=Sequence '!'
	//	| {AlwaysProperty} 'always' operand=Property
	//	| {NeverBooleanProperty} 'never' operand=BooleanOrOCLLiteral
	//	| {NeverSequenceProperty} 'never' operand=Sequence
	//	| {NextEProperty} 'next_e' operand=BooleanOrOCLLiteral
	//	| {EventuallyBooleanProperty} 'eventually!' operand=BooleanOrOCLLiteral
	//	| {EventuallySequenceProperty} 'eventually!' operand=Sequence;
	public UnaryPropertyElements getUnaryPropertyAccess() {
		return pUnaryProperty;
	}
	
	public ParserRule getUnaryPropertyRule() {
		return getUnaryPropertyAccess().getRule();
	}
	
	//BinaryProperty:
	//	{OrBooleanPropertyProperty} left=BooleanOrOCLLiteral 'or' right=Property
	//	| {ImpliesProperty} left=BooleanOrOCLLiteral '->' right=Property
	//	| {EquivalenceProperty} left=BooleanOrOCLLiteral '<->' right=BooleanOrOCLLiteral
	//	| {OverlappingUntilProperty} left=BooleanOrOCLLiteral 'until_' right=BooleanOrOCLLiteral
	//	| {BeforeProperty} left=BooleanOrOCLLiteral 'before' right=BooleanOrOCLLiteral
	//	| {SuffixImplicationProperty} left=Sequence '|=>' right=Property
	//	| {OverlappingSuffixImplicationProperty} left=Sequence '|->' right=Property
	//	| {NextEventAProperty} 'next_event_a' '(' left=BooleanOrOCLLiteral ')' '[' range=Range ']' '(' right=Property ')';
	public BinaryPropertyElements getBinaryPropertyAccess() {
		return pBinaryProperty;
	}
	
	public ParserRule getBinaryPropertyRule() {
		return getBinaryPropertyAccess().getRule();
	}
	
	//BooleanOrOCLLiteral:
	//	{NotBooleanOrOCLLiteral} 'not' literal=BooleanOrOCLLiteral
	//	| {BooleanLiteral} literal=BooleanLiteralExpCS
	//	| {OCLLiteral} 'ocl' literal=[base::ConstraintCS];
	public BooleanOrOCLLiteralElements getBooleanOrOCLLiteralAccess() {
		return pBooleanOrOCLLiteral;
	}
	
	public ParserRule getBooleanOrOCLLiteralRule() {
		return getBooleanOrOCLLiteralAccess().getRule();
	}
	
	//SERE:
	//	SimpleSERE
	//	| {FusionSERE} hd=SimpleSERE ':' tl=SimpleSERE
	//	| {ConcatenationSERE} hd=SimpleSERE ';' tl=SimpleSERE;
	public SEREElements getSEREAccess() {
		return pSERE;
	}
	
	public ParserRule getSERERule() {
		return getSEREAccess().getRule();
	}
	
	//SimpleSERE:
	//	BooleanOrOCLLiteral
	//	| Sequence
	//	| CompoundSERE
	//	//	| Clocked_SERE
	//;
	public SimpleSEREElements getSimpleSEREAccess() {
		return pSimpleSERE;
	}
	
	public ParserRule getSimpleSERERule() {
		return getSimpleSEREAccess().getRule();
	}
	
	//Sequence:
	//	BracedSERE | RepeatedSERE;
	public SequenceElements getSequenceAccess() {
		return pSequence;
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}
	
	//RepeatedSERE:
	//	{BooleanCountedConsecutiveRepetition} expression=BooleanOrOCLLiteral '[' '*' count=Count? ']'
	//	| {SequenceCountedConsecutiveRepetition} expression=BracedSERE '[' '*' count=Count? ']'
	//	| {SequenceCountedConsecutiveRepetition} '(' expression=RepeatedSERE '[' '*' count=Count? ']' ')'
	//	| {BooleanConsecutiveRepetition} expression=BooleanOrOCLLiteral '[' '+' ']'
	//	| {SequenceConsecutiveRepetition} expression=BracedSERE '[' '+' ']'
	//	| {SequenceConsecutiveRepetition} '(' expression=RepeatedSERE '[' '+' ']' ')'
	//	| {BooleanCountedNonConsecutiveRepetition} expression=BooleanOrOCLLiteral '[' '=' count=Count ']'
	//	| {BooleanCountedGotoRepetition} expression=BooleanOrOCLLiteral '[' '->' count=Count? ']'
	//	| {WildCard} '[' '*' count=Count? ']'
	//	| {LengthOne} '[' '+' ']';
	public RepeatedSEREElements getRepeatedSEREAccess() {
		return pRepeatedSERE;
	}
	
	public ParserRule getRepeatedSERERule() {
		return getRepeatedSEREAccess().getRule();
	}
	
	//BracedSERE:
	//	'{' expression=SERE '}';
	public BracedSEREElements getBracedSEREAccess() {
		return pBracedSERE;
	}
	
	public ParserRule getBracedSERERule() {
		return getBracedSEREAccess().getRule();
	}
	
	////Clocked_SERE:
	////	Braced_SERE '@' 
	////;
	//CompoundSERE:
	//	RepeatedSERE | BracedSERE | BinaryCompoundSERE
	//	//	| Parameterized_SERE | Clocked_SERE
	//;
	public CompoundSEREElements getCompoundSEREAccess() {
		return pCompoundSERE;
	}
	
	public ParserRule getCompoundSERERule() {
		return getCompoundSEREAccess().getRule();
	}
	
	//BinaryCompoundSERE:
	//	{SEREOr} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') '|' (right=RepeatedSERE |
	//	right=BracedSERE | '(' right=BinaryCompoundSERE ')') | {SEREAndNLM} (left=RepeatedSERE | left=BracedSERE | '('
	//	left=BinaryCompoundSERE ')') '&' (right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')') |
	//	{SEREAndLM} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') '&&' (right=RepeatedSERE |
	//	right=BracedSERE | '(' right=BinaryCompoundSERE ')') | {SEREWithin} (left=RepeatedSERE | left=BracedSERE | '('
	//	left=BinaryCompoundSERE ')') 'within' (right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')');
	public BinaryCompoundSEREElements getBinaryCompoundSEREAccess() {
		return pBinaryCompoundSERE;
	}
	
	public ParserRule getBinaryCompoundSERERule() {
		return getBinaryCompoundSEREAccess().getRule();
	}
	
	////Parameterized_SERE:
	////	'for' params=Parameters_Definition ':' operator=And_Or_SERE_Op '{' SERE=[SERE] '}'
	////;
	////Parameters_Definition:
	////	paramDef+=Parameter_Definition (',' paramDef+=Parameter_Definition)*
	////;
	////Parameter_Definition:
	////	PSL_Identifier Index_Range? 'in' Value_Set
	////;
	//Count:
	//	COUNT=NUMBER | Range;
	public CountElements getCountAccess() {
		return pCount;
	}
	
	public ParserRule getCountRule() {
		return getCountAccess().getRule();
	}
	
	//Range:
	//	LOWER_BOUND=NUMBER ':' HIGHER_BOUND=NUMBER;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//NUMBER ecore::EInt:
	//	INT
	public NUMBERElements getNUMBERAccess() {
		return pNUMBER;
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}
	
	//terminal IMPORT_URI:
	//	SCHEME SIMPLE_ID (("." | "/") SIMPLE_ID)*;
	public TerminalRule getIMPORT_URIRule() {
		return tIMPORT_URI;
	}
	
	//terminal SCHEME:
	//	SIMPLE_ID ":/";
	public TerminalRule getSCHEMERule() {
		return tSCHEME;
	}
	
	//FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	/// *
	// * A Complete OCL document comprises
	// * bullet[model imports for referenced and complemented models]
	// * bullet[includes for additional Complete OCL documents]
	// * bullet[libraries to augment or override the OCL Standard Library]
	// * bullet[package declarations for package-grouped declarations]
	// * bullet[context declarations for independent declarations]
	// * / CompleteOCLDocumentCS:
	//	ownedImports+=ImportCS* (ownedPackages+=PackageDeclarationCS | ownedContexts+=ContextDeclCS)*;
	public CompleteOCLGrammarAccess.CompleteOCLDocumentCSElements getCompleteOCLDocumentCSAccess() {
		return gaCompleteOCL.getCompleteOCLDocumentCSAccess();
	}
	
	public ParserRule getCompleteOCLDocumentCSRule() {
		return getCompleteOCLDocumentCSAccess().getRule();
	}
	
	//terminal UNQUOTED_STRING: // Never forward parsed; just provides a placeholder
	//	'£$%^£$%^' //  for reverse serialisation of embedded OCL 
	//;
	public TerminalRule getUNQUOTED_STRINGRule() {
		return gaCompleteOCL.getUNQUOTED_STRINGRule();
	}
	
	//CompleteOCLNavigationOperatorName:
	//	'^' | '^^';
	public CompleteOCLGrammarAccess.CompleteOCLNavigationOperatorNameElements getCompleteOCLNavigationOperatorNameAccess() {
		return gaCompleteOCL.getCompleteOCLNavigationOperatorNameAccess();
	}
	
	public ParserRule getCompleteOCLNavigationOperatorNameRule() {
		return getCompleteOCLNavigationOperatorNameAccess().getRule();
	}
	
	//ClassifierContextDeclCS:
	//	'context' ownedSignature=TemplateSignatureCS? selfName=UnrestrictedName?
	//	ownedPathName=PathNameCS ('inv' ownedInvariants+=ConstraintCS | ownedDefinitions+=DefCS)+;
	public CompleteOCLGrammarAccess.ClassifierContextDeclCSElements getClassifierContextDeclCSAccess() {
		return gaCompleteOCL.getClassifierContextDeclCSAccess();
	}
	
	public ParserRule getClassifierContextDeclCSRule() {
		return getClassifierContextDeclCSAccess().getRule();
	}
	
	/// *
	// * A Constraint such as 
	// * 
	// * oclText[IsNull('should be null') : self = null]
	// * 
	// * comprises at least the OCL specification of the constraint. The constraint may
	// * additionally have a name which may be followed by a parenthesized expression defining an OCL
	// * expression to be evaluated to provide an error message.
	// * / ConstraintCS base::ConstraintCS:
	//	(name=UnrestrictedName ('(' ownedMessageSpecification=SpecificationCS ')')?)? ':' ownedSpecification=SpecificationCS
	public CompleteOCLGrammarAccess.ConstraintCSElements getConstraintCSAccess() {
		return gaCompleteOCL.getConstraintCSAccess();
	}
	
	public ParserRule getConstraintCSRule() {
		return getConstraintCSAccess().getRule();
	}
	
	/// *
	// * A Context declaration can be a Classifier, Operation of Property Context declaration.
	// * / ContextDeclCS:
	//	PropertyContextDeclCS
	//	| ClassifierContextDeclCS
	//	| OperationContextDeclCS;
	public CompleteOCLGrammarAccess.ContextDeclCSElements getContextDeclCSAccess() {
		return gaCompleteOCL.getContextDeclCSAccess();
	}
	
	public ParserRule getContextDeclCSRule() {
		return getContextDeclCSAccess().getRule();
	}
	
	/// *
	// * A definition can be an, Operation or Property definition.
	// * / DefCS:
	//	DefOperationCS | DefPropertyCS;
	public CompleteOCLGrammarAccess.DefCSElements getDefCSAccess() {
		return gaCompleteOCL.getDefCSAccess();
	}
	
	public ParserRule getDefCSRule() {
		return getDefCSAccess().getRule();
	}
	
	/// *
	// * An operation definition provides an additional operation for its classifier context.
	// * 
	// * oclText[static def redundantName: isEven(i : Integer) : Boolean = i mod 2 = 0]
	// * 
	// * comprises at least an operation name, return type and an OCL expression that evaluates the operation value.
	// * The operation may have parameters and may be declared static in which case there is no oclText[self].
	// * 
	// * For compatibility with invariants the definition may have a name that is never used.
	// * / DefOperationCS:
	//	isStatic?='static'? 'def' UnrestrictedName? ':' ownedSignature=TemplateSignatureCS?
	//	name=UnrestrictedName '(' (ownedParameters+=DefParameterCS (',' ownedParameters+=DefParameterCS)*)? ')' ':'
	//	ownedType=TypeExpCS?
	//	'=' ownedSpecification=SpecificationCS;
	public CompleteOCLGrammarAccess.DefOperationCSElements getDefOperationCSAccess() {
		return gaCompleteOCL.getDefOperationCSAccess();
	}
	
	public ParserRule getDefOperationCSRule() {
		return getDefOperationCSAccess().getRule();
	}
	
	//DefParameterCS base::ParameterCS:
	//	name=UnrestrictedName ':' ownedType=TypeExpCS
	public CompleteOCLGrammarAccess.DefParameterCSElements getDefParameterCSAccess() {
		return gaCompleteOCL.getDefParameterCSAccess();
	}
	
	public ParserRule getDefParameterCSRule() {
		return getDefParameterCSAccess().getRule();
	}
	
	/// *
	// * A property definition provides an additional property for its classifier context.
	// * 
	// * oclText[static def redundantName: upperCaseName : Boolean = name.toUpperCase()]
	// * 
	// * comprises at least a property name, type and an OCL expression that evaluates the property value.
	// * The property may be declared static in which case there is no oclText[self].
	// * 
	// * For compatibility with invariants the definition may have a name that is never used.
	// * / DefPropertyCS:
	//	isStatic?='static'? 'def' UnrestrictedName? ':' name=UnrestrictedName ':' ownedType=TypeExpCS
	//	'=' ownedSpecification=SpecificationCS;
	public CompleteOCLGrammarAccess.DefPropertyCSElements getDefPropertyCSAccess() {
		return gaCompleteOCL.getDefPropertyCSAccess();
	}
	
	public ParserRule getDefPropertyCSRule() {
		return getDefPropertyCSAccess().getRule();
	}
	
	//ImportCS base::ImportCS:
	//	('import' | 'include' | 'library') (name=Identifier ':')? ownedPathName=URIPathNameCS isAll?='::*'?
	public CompleteOCLGrammarAccess.ImportCSElements getImportCSAccess() {
		return gaCompleteOCL.getImportCSAccess();
	}
	
	public ParserRule getImportCSRule() {
		return getImportCSAccess().getRule();
	}
	
	/// *
	// * An operation context declaration complements an existing operation with additional details.
	// * 
	// * oclText[context (T) Stack::pop() : T]
	// * oclText[pre NotEmptyPop: size() > 0]
	// * oclText[post: size()@pre = size() + 1]
	// * 
	// * The operation declaration comprises at least an operation name, which must be qualified with at least a
	// * class name. If used outside a package declaration, package name qualification is also needed. 
	// * If the return type is omitted OclVoid is used.
	// * The operation may also have operation parameters and template parameters.
	// * The declaration may be followed by any number of preconditions,
	// * and/or postconditions. It may also be followed by a body expression that defines the evaluation. 
	// * 
	// * For compatibility with invariants the body expression may have a name that is never used.
	// * / OperationContextDeclCS:
	//	'context' ownedSignature=TemplateSignatureCS? ownedPathName=PathNameCS
	//	'(' (ownedParameters+=ParameterCS (',' ownedParameters+=ParameterCS)*)? ')' ':' ownedType=TypeExpCS? ('pre'
	//	ownedPreconditions+=ConstraintCS | 'post' ownedPostconditions+=ConstraintCS | 'body' UnrestrictedName? ':'
	//	ownedBodies+=SpecificationCS)*;
	public CompleteOCLGrammarAccess.OperationContextDeclCSElements getOperationContextDeclCSAccess() {
		return gaCompleteOCL.getOperationContextDeclCSAccess();
	}
	
	public ParserRule getOperationContextDeclCSRule() {
		return getOperationContextDeclCSAccess().getRule();
	}
	
	//PackageDeclarationCS:
	//	'package' ownedPathName=PathNameCS ('inv' ownedInvariants+=ConstraintCS)* ownedContexts+=ContextDeclCS* 'endpackage';
	public CompleteOCLGrammarAccess.PackageDeclarationCSElements getPackageDeclarationCSAccess() {
		return gaCompleteOCL.getPackageDeclarationCSAccess();
	}
	
	public ParserRule getPackageDeclarationCSRule() {
		return getPackageDeclarationCSAccess().getRule();
	}
	
	//ParameterCS base::ParameterCS:
	//	(name=UnrestrictedName ':')? ownedType=TypeExpCS
	public CompleteOCLGrammarAccess.ParameterCSElements getParameterCSAccess() {
		return gaCompleteOCL.getParameterCSAccess();
	}
	
	public ParserRule getParameterCSRule() {
		return getParameterCSAccess().getRule();
	}
	
	/// *
	// * A property context declaration complements an existing property with additional details.
	// * 
	// * oclText[context (T) Stack::isEmpty : Boolean]
	// * oclText[derive IsEmpty: size() = 0]
	// * 
	// * The property declaration comprises at least a property name and type.
	// * The type must be qualified with at least a class name.
	// * If used outside a package declaration, package name qualification is also needed. 
	// * The declaration may be followed by a derive constraint and/or an init expression.
	// * 
	// * A derive constraint provides an alternate mechanism for defining a class invariant;
	// * the only difference is that the property is identified as a constrainedElement. As an
	// * invariant the constraint provides an OCL expression that should always be true.
	// * 
	// * For a non-derived property, an init expression defines the value to be assigned to the property
	// * when its containing object is first created. 
	// * 
	// * For a derived property, an init expression defines the evaluation of the property, which
	// * may vary from access to access even for read-only properties. 
	// * / PropertyContextDeclCS:
	//	'context' ownedPathName=PathNameCS ':' ownedType=TypeExpCS ('derive' ownedDerivedInvariants+=ConstraintCS | 'init' ':'
	//	ownedDefaultExpressions+=SpecificationCS)*;
	public CompleteOCLGrammarAccess.PropertyContextDeclCSElements getPropertyContextDeclCSAccess() {
		return gaCompleteOCL.getPropertyContextDeclCSAccess();
	}
	
	public ParserRule getPropertyContextDeclCSRule() {
		return getPropertyContextDeclCSAccess().getRule();
	}
	
	//SpecificationCS essentialocl::ExpSpecificationCS:
	//	ownedExpression=ExpCS | exprString=UNQUOTED_STRING
	public CompleteOCLGrammarAccess.SpecificationCSElements getSpecificationCSAccess() {
		return gaCompleteOCL.getSpecificationCSAccess();
	}
	
	public ParserRule getSpecificationCSRule() {
		return getSpecificationCSAccess().getRule();
	}
	
	////---------------------------------------------------------------------------------
	////	Base overrides
	////---------------------------------------------------------------------------------
	//TemplateSignatureCS base::TemplateSignatureCS:
	//	'(' ownedParameters+=TypeParameterCS (',' ownedParameters+=TypeParameterCS)* ')' | '<'
	//	ownedParameters+=TypeParameterCS (',' ownedParameters+=TypeParameterCS)* '>'
	public CompleteOCLGrammarAccess.TemplateSignatureCSElements getTemplateSignatureCSAccess() {
		return gaCompleteOCL.getTemplateSignatureCSAccess();
	}
	
	public ParserRule getTemplateSignatureCSRule() {
		return getTemplateSignatureCSAccess().getRule();
	}
	
	//TypedRefCS base::TypedRefCS:
	//	TypeLiteralCS | TypedTypeRefCS
	public CompleteOCLGrammarAccess.TypedRefCSElements getTypedRefCSAccess() {
		return gaCompleteOCL.getTypedRefCSAccess();
	}
	
	public ParserRule getTypedRefCSRule() {
		return getTypedRefCSAccess().getRule();
	}
	
	//UnrestrictedName:
	//	EssentialOCLUnrestrictedName
	//	//| 'body'
	//	//| 'context'
	//	//| 'def'
	//	//| 'derive'
	//	//|	'endpackage'
	//	| 'import'
	//	| 'include'
	//	//| 'init'
	//	//| 'inv'
	//	| 'library'
	//	//|	'package'
	//	//|	'post'
	//	//|	'pre'
	//	//|	'static'
	//;
	public CompleteOCLGrammarAccess.UnrestrictedNameElements getUnrestrictedNameAccess() {
		return gaCompleteOCL.getUnrestrictedNameAccess();
	}
	
	public ParserRule getUnrestrictedNameRule() {
		return getUnrestrictedNameAccess().getRule();
	}
	
	////---------------------------------------------------------------------------------
	////	EssentialOCL overrides
	////---------------------------------------------------------------------------------
	//NavigatingArgExpCS essentialocl::ExpCS:
	//	{OCLMessageArgCS} '?' | ExpCS
	public CompleteOCLGrammarAccess.NavigatingArgExpCSElements getNavigatingArgExpCSAccess() {
		return gaCompleteOCL.getNavigatingArgExpCSAccess();
	}
	
	public ParserRule getNavigatingArgExpCSRule() {
		return getNavigatingArgExpCSAccess().getRule();
	}
	
	//NavigationOperatorName:
	//	EssentialOCLNavigationOperatorName | CompleteOCLNavigationOperatorName;
	public CompleteOCLGrammarAccess.NavigationOperatorNameElements getNavigationOperatorNameAccess() {
		return gaCompleteOCL.getNavigationOperatorNameAccess();
	}
	
	public ParserRule getNavigationOperatorNameRule() {
		return getNavigationOperatorNameAccess().getRule();
	}
	
	//PrimitiveTypeIdentifier:
	//	'Boolean'
	//	| 'Integer'
	//	| 'Real'
	//	| 'String'
	//	| 'UnlimitedNatural'
	//	| 'OclAny'
	//	| 'OclInvalid'
	//	| 'OclMessage'
	//	| 'OclState'
	//	| 'OclVoid';
	public CompleteOCLGrammarAccess.PrimitiveTypeIdentifierElements getPrimitiveTypeIdentifierAccess() {
		return gaCompleteOCL.getPrimitiveTypeIdentifierAccess();
	}
	
	public ParserRule getPrimitiveTypeIdentifierRule() {
		return getPrimitiveTypeIdentifierAccess().getRule();
	}
	
	////generate essentialOCLCST "http://www.eclipse.org/ocl/3.0.0/EssentialOCLCST"
	//Model ContextCS:
	//	ownedExpression=ExpCS
	public EssentialOCLGrammarAccess.ModelElements getModelAccess() {
		return gaEssentialOCL.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLReservedKeyword:
	//	'and'
	//	| 'else'
	//	| 'endif'
	//	| 'if'
	//	| 'implies'
	//	| 'in'
	//	| 'let'
	//	| 'not'
	//	| 'or'
	//	| 'then'
	//	| 'xor';
	public EssentialOCLGrammarAccess.EssentialOCLReservedKeywordElements getEssentialOCLReservedKeywordAccess() {
		return gaEssentialOCL.getEssentialOCLReservedKeywordAccess();
	}
	
	public ParserRule getEssentialOCLReservedKeywordRule() {
		return getEssentialOCLReservedKeywordAccess().getRule();
	}
	
	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnaryOperatorName:
	//	'-' | 'not';
	public EssentialOCLGrammarAccess.EssentialOCLUnaryOperatorNameElements getEssentialOCLUnaryOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnaryOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLUnaryOperatorNameRule() {
		return getEssentialOCLUnaryOperatorNameAccess().getRule();
	}
	
	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLInfixOperatorName:
	//	'*' | '/' | '+' | '-' | '>' | '<' | '>=' | '<=' | '=' | '<>' | 'and' | 'or' | 'xor' | 'implies';
	public EssentialOCLGrammarAccess.EssentialOCLInfixOperatorNameElements getEssentialOCLInfixOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLInfixOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLInfixOperatorNameRule() {
		return getEssentialOCLInfixOperatorNameAccess().getRule();
	}
	
	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLNavigationOperatorName:
	//	'.' | '->' | '?.' | '?->';
	public EssentialOCLGrammarAccess.EssentialOCLNavigationOperatorNameElements getEssentialOCLNavigationOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLNavigationOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLNavigationOperatorNameRule() {
		return getEssentialOCLNavigationOperatorNameAccess().getRule();
	}
	
	//BinaryOperatorName:
	//	InfixOperatorName | super::NavigationOperatorName;
	public EssentialOCLGrammarAccess.BinaryOperatorNameElements getBinaryOperatorNameAccess() {
		return gaEssentialOCL.getBinaryOperatorNameAccess();
	}
	
	public ParserRule getBinaryOperatorNameRule() {
		return getBinaryOperatorNameAccess().getRule();
	}
	
	//InfixOperatorName:
	//	EssentialOCLInfixOperatorName;
	public EssentialOCLGrammarAccess.InfixOperatorNameElements getInfixOperatorNameAccess() {
		return gaEssentialOCL.getInfixOperatorNameAccess();
	}
	
	public ParserRule getInfixOperatorNameRule() {
		return getInfixOperatorNameAccess().getRule();
	}
	
	//UnaryOperatorName:
	//	EssentialOCLUnaryOperatorName;
	public EssentialOCLGrammarAccess.UnaryOperatorNameElements getUnaryOperatorNameAccess() {
		return gaEssentialOCL.getUnaryOperatorNameAccess();
	}
	
	public ParserRule getUnaryOperatorNameRule() {
		return getUnaryOperatorNameAccess().getRule();
	}
	
	////---------------------------------------------------------------------
	////  Names
	////---------------------------------------------------------------------
	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnrestrictedName:
	//	Identifier;
	public EssentialOCLGrammarAccess.EssentialOCLUnrestrictedNameElements getEssentialOCLUnrestrictedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnrestrictedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnrestrictedNameRule() {
		return getEssentialOCLUnrestrictedNameAccess().getRule();
	}
	
	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnreservedName:
	//	super::UnrestrictedName
	//	| CollectionTypeIdentifier
	//	| super::PrimitiveTypeIdentifier
	//	| 'Map'
	//	| 'Tuple';
	public EssentialOCLGrammarAccess.EssentialOCLUnreservedNameElements getEssentialOCLUnreservedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnreservedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnreservedNameRule() {
		return getEssentialOCLUnreservedNameAccess().getRule();
	}
	
	//UnreservedName:
	//	EssentialOCLUnreservedName;
	public EssentialOCLGrammarAccess.UnreservedNameElements getUnreservedNameAccess() {
		return gaEssentialOCL.getUnreservedNameAccess();
	}
	
	public ParserRule getUnreservedNameRule() {
		return getUnreservedNameAccess().getRule();
	}
	
	//URIPathNameCS base::PathNameCS:
	//	ownedPathElements+=URIFirstPathElementCS ('::' ownedPathElements+=NextPathElementCS)*
	public EssentialOCLGrammarAccess.URIPathNameCSElements getURIPathNameCSAccess() {
		return gaEssentialOCL.getURIPathNameCSAccess();
	}
	
	public ParserRule getURIPathNameCSRule() {
		return getURIPathNameCSAccess().getRule();
	}
	
	//URIFirstPathElementCS base::PathElementCS:
	//	referredElement=[pivot::NamedElement|super::UnrestrictedName] | {base::PathElementWithURICS}
	//	referredElement=[pivot::Namespace|URI]
	public EssentialOCLGrammarAccess.URIFirstPathElementCSElements getURIFirstPathElementCSAccess() {
		return gaEssentialOCL.getURIFirstPathElementCSAccess();
	}
	
	public ParserRule getURIFirstPathElementCSRule() {
		return getURIFirstPathElementCSAccess().getRule();
	}
	
	//PrimitiveTypeCS base::PrimitiveTypeRefCS:
	//	name=super::PrimitiveTypeIdentifier
	public EssentialOCLGrammarAccess.PrimitiveTypeCSElements getPrimitiveTypeCSAccess() {
		return gaEssentialOCL.getPrimitiveTypeCSAccess();
	}
	
	public ParserRule getPrimitiveTypeCSRule() {
		return getPrimitiveTypeCSAccess().getRule();
	}
	
	//CollectionTypeIdentifier:
	//	'Set'
	//	| 'Bag'
	//	| 'Sequence'
	//	| 'Collection'
	//	| 'OrderedSet';
	public EssentialOCLGrammarAccess.CollectionTypeIdentifierElements getCollectionTypeIdentifierAccess() {
		return gaEssentialOCL.getCollectionTypeIdentifierAccess();
	}
	
	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}
	
	//CollectionTypeCS:
	//	name=CollectionTypeIdentifier ('(' ownedType=TypeExpCS ')')?;
	public EssentialOCLGrammarAccess.CollectionTypeCSElements getCollectionTypeCSAccess() {
		return gaEssentialOCL.getCollectionTypeCSAccess();
	}
	
	public ParserRule getCollectionTypeCSRule() {
		return getCollectionTypeCSAccess().getRule();
	}
	
	//MapTypeCS:
	//	name='Map' ('(' ownedKeyType=TypeExpCS ',' ownedValueType=TypeExpCS ')')?;
	public EssentialOCLGrammarAccess.MapTypeCSElements getMapTypeCSAccess() {
		return gaEssentialOCL.getMapTypeCSAccess();
	}
	
	public ParserRule getMapTypeCSRule() {
		return getMapTypeCSAccess().getRule();
	}
	
	//TupleTypeCS base::TupleTypeCS:
	//	name='Tuple' ('(' (ownedParts+=TuplePartCS (',' ownedParts+=TuplePartCS)*)? ')')?
	public EssentialOCLGrammarAccess.TupleTypeCSElements getTupleTypeCSAccess() {
		return gaEssentialOCL.getTupleTypeCSAccess();
	}
	
	public ParserRule getTupleTypeCSRule() {
		return getTupleTypeCSAccess().getRule();
	}
	
	//TuplePartCS base::TuplePartCS:
	//	name=super::UnrestrictedName ':' ownedType=TypeExpCS
	public EssentialOCLGrammarAccess.TuplePartCSElements getTuplePartCSAccess() {
		return gaEssentialOCL.getTuplePartCSAccess();
	}
	
	public ParserRule getTuplePartCSRule() {
		return getTuplePartCSAccess().getRule();
	}
	
	////---------------------------------------------------------------------
	////  Literals
	////---------------------------------------------------------------------
	//CollectionLiteralExpCS:
	//	ownedType=CollectionTypeCS
	//	'{' (ownedParts+=CollectionLiteralPartCS (',' ownedParts+=CollectionLiteralPartCS)*)?
	//	'}';
	public EssentialOCLGrammarAccess.CollectionLiteralExpCSElements getCollectionLiteralExpCSAccess() {
		return gaEssentialOCL.getCollectionLiteralExpCSAccess();
	}
	
	public ParserRule getCollectionLiteralExpCSRule() {
		return getCollectionLiteralExpCSAccess().getRule();
	}
	
	//CollectionLiteralPartCS:
	//	ownedExpression=ExpCS ('..' ownedLastExpression=ExpCS)? | ownedExpression=PatternExpCS;
	public EssentialOCLGrammarAccess.CollectionLiteralPartCSElements getCollectionLiteralPartCSAccess() {
		return gaEssentialOCL.getCollectionLiteralPartCSAccess();
	}
	
	public ParserRule getCollectionLiteralPartCSRule() {
		return getCollectionLiteralPartCSAccess().getRule();
	}
	
	//CollectionPatternCS:
	//	ownedType=CollectionTypeCS
	//	'{' (ownedParts+=PatternExpCS (',' ownedParts+=PatternExpCS)* ('++' restVariableName=Identifier))?
	//	'}';
	public EssentialOCLGrammarAccess.CollectionPatternCSElements getCollectionPatternCSAccess() {
		return gaEssentialOCL.getCollectionPatternCSAccess();
	}
	
	public ParserRule getCollectionPatternCSRule() {
		return getCollectionPatternCSAccess().getRule();
	}
	
	//ShadowPartCS:
	//	referredProperty=[pivot::Property|super::UnrestrictedName] '=' ownedInitExpression=(ExpCS | PatternExpCS);
	public EssentialOCLGrammarAccess.ShadowPartCSElements getShadowPartCSAccess() {
		return gaEssentialOCL.getShadowPartCSAccess();
	}
	
	public ParserRule getShadowPartCSRule() {
		return getShadowPartCSAccess().getRule();
	}
	
	//PatternExpCS:
	//	patternVariableName=super::UnrestrictedName? ':' ownedPatternType=TypeExpCS;
	public EssentialOCLGrammarAccess.PatternExpCSElements getPatternExpCSAccess() {
		return gaEssentialOCL.getPatternExpCSAccess();
	}
	
	public ParserRule getPatternExpCSRule() {
		return getPatternExpCSAccess().getRule();
	}
	
	//LambdaLiteralExpCS:
	//	'Lambda' '{' ownedExpressionCS=ExpCS '}';
	public EssentialOCLGrammarAccess.LambdaLiteralExpCSElements getLambdaLiteralExpCSAccess() {
		return gaEssentialOCL.getLambdaLiteralExpCSAccess();
	}
	
	public ParserRule getLambdaLiteralExpCSRule() {
		return getLambdaLiteralExpCSAccess().getRule();
	}
	
	//MapLiteralExpCS:
	//	ownedType=MapTypeCS '{' (ownedParts+=MapLiteralPartCS (',' ownedParts+=MapLiteralPartCS)*)? '}';
	public EssentialOCLGrammarAccess.MapLiteralExpCSElements getMapLiteralExpCSAccess() {
		return gaEssentialOCL.getMapLiteralExpCSAccess();
	}
	
	public ParserRule getMapLiteralExpCSRule() {
		return getMapLiteralExpCSAccess().getRule();
	}
	
	//MapLiteralPartCS:
	//	ownedKey=ExpCS '<-' ownedValue=ExpCS;
	public EssentialOCLGrammarAccess.MapLiteralPartCSElements getMapLiteralPartCSAccess() {
		return gaEssentialOCL.getMapLiteralPartCSAccess();
	}
	
	public ParserRule getMapLiteralPartCSRule() {
		return getMapLiteralPartCSAccess().getRule();
	}
	
	//PrimitiveLiteralExpCS:
	//	NumberLiteralExpCS
	//	| StringLiteralExpCS
	//	| BooleanLiteralExpCS
	//	| UnlimitedNaturalLiteralExpCS
	//	| InvalidLiteralExpCS
	//	| NullLiteralExpCS;
	public EssentialOCLGrammarAccess.PrimitiveLiteralExpCSElements getPrimitiveLiteralExpCSAccess() {
		return gaEssentialOCL.getPrimitiveLiteralExpCSAccess();
	}
	
	public ParserRule getPrimitiveLiteralExpCSRule() {
		return getPrimitiveLiteralExpCSAccess().getRule();
	}
	
	//TupleLiteralExpCS:
	//	'Tuple' '{' ownedParts+=TupleLiteralPartCS (',' ownedParts+=TupleLiteralPartCS)* '}';
	public EssentialOCLGrammarAccess.TupleLiteralExpCSElements getTupleLiteralExpCSAccess() {
		return gaEssentialOCL.getTupleLiteralExpCSAccess();
	}
	
	public ParserRule getTupleLiteralExpCSRule() {
		return getTupleLiteralExpCSAccess().getRule();
	}
	
	//TupleLiteralPartCS:
	//	name=super::UnrestrictedName (':' ownedType=TypeExpCS)? '=' ownedInitExpression=ExpCS;
	public EssentialOCLGrammarAccess.TupleLiteralPartCSElements getTupleLiteralPartCSAccess() {
		return gaEssentialOCL.getTupleLiteralPartCSAccess();
	}
	
	public ParserRule getTupleLiteralPartCSRule() {
		return getTupleLiteralPartCSAccess().getRule();
	}
	
	//NumberLiteralExpCS:
	//	symbol=NUMBER_LITERAL;
	public EssentialOCLGrammarAccess.NumberLiteralExpCSElements getNumberLiteralExpCSAccess() {
		return gaEssentialOCL.getNumberLiteralExpCSAccess();
	}
	
	public ParserRule getNumberLiteralExpCSRule() {
		return getNumberLiteralExpCSAccess().getRule();
	}
	
	//StringLiteralExpCS:
	//	segments+=StringLiteral+;
	public EssentialOCLGrammarAccess.StringLiteralExpCSElements getStringLiteralExpCSAccess() {
		return gaEssentialOCL.getStringLiteralExpCSAccess();
	}
	
	public ParserRule getStringLiteralExpCSRule() {
		return getStringLiteralExpCSAccess().getRule();
	}
	
	//BooleanLiteralExpCS:
	//	symbol='true'
	//	| symbol='false';
	public EssentialOCLGrammarAccess.BooleanLiteralExpCSElements getBooleanLiteralExpCSAccess() {
		return gaEssentialOCL.getBooleanLiteralExpCSAccess();
	}
	
	public ParserRule getBooleanLiteralExpCSRule() {
		return getBooleanLiteralExpCSAccess().getRule();
	}
	
	//UnlimitedNaturalLiteralExpCS:
	//	{UnlimitedNaturalLiteralExpCS} '*';
	public EssentialOCLGrammarAccess.UnlimitedNaturalLiteralExpCSElements getUnlimitedNaturalLiteralExpCSAccess() {
		return gaEssentialOCL.getUnlimitedNaturalLiteralExpCSAccess();
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpCSRule() {
		return getUnlimitedNaturalLiteralExpCSAccess().getRule();
	}
	
	//InvalidLiteralExpCS:
	//	{InvalidLiteralExpCS} 'invalid';
	public EssentialOCLGrammarAccess.InvalidLiteralExpCSElements getInvalidLiteralExpCSAccess() {
		return gaEssentialOCL.getInvalidLiteralExpCSAccess();
	}
	
	public ParserRule getInvalidLiteralExpCSRule() {
		return getInvalidLiteralExpCSAccess().getRule();
	}
	
	//NullLiteralExpCS:
	//	{NullLiteralExpCS} 'null';
	public EssentialOCLGrammarAccess.NullLiteralExpCSElements getNullLiteralExpCSAccess() {
		return gaEssentialOCL.getNullLiteralExpCSAccess();
	}
	
	public ParserRule getNullLiteralExpCSRule() {
		return getNullLiteralExpCSAccess().getRule();
	}
	
	//TypeLiteralCS base::TypedRefCS:
	//	PrimitiveTypeCS
	//	| CollectionTypeCS
	//	| MapTypeCS
	//	| TupleTypeCS
	public EssentialOCLGrammarAccess.TypeLiteralCSElements getTypeLiteralCSAccess() {
		return gaEssentialOCL.getTypeLiteralCSAccess();
	}
	
	public ParserRule getTypeLiteralCSRule() {
		return getTypeLiteralCSAccess().getRule();
	}
	
	//TypeLiteralWithMultiplicityCS base::TypedRefCS:
	//	TypeLiteralCS ownedMultiplicity=MultiplicityCS?
	public EssentialOCLGrammarAccess.TypeLiteralWithMultiplicityCSElements getTypeLiteralWithMultiplicityCSAccess() {
		return gaEssentialOCL.getTypeLiteralWithMultiplicityCSAccess();
	}
	
	public ParserRule getTypeLiteralWithMultiplicityCSRule() {
		return getTypeLiteralWithMultiplicityCSAccess().getRule();
	}
	
	//TypeLiteralExpCS:
	//	ownedType=TypeLiteralWithMultiplicityCS;
	public EssentialOCLGrammarAccess.TypeLiteralExpCSElements getTypeLiteralExpCSAccess() {
		return gaEssentialOCL.getTypeLiteralExpCSAccess();
	}
	
	public ParserRule getTypeLiteralExpCSRule() {
		return getTypeLiteralExpCSAccess().getRule();
	}
	
	//TypeNameExpCS:
	//	ownedPathName=PathNameCS (ownedCurlyBracketedClause=CurlyBracketedClauseCS ('{' ownedPatternGuard=ExpCS '}')?)?;
	public EssentialOCLGrammarAccess.TypeNameExpCSElements getTypeNameExpCSAccess() {
		return gaEssentialOCL.getTypeNameExpCSAccess();
	}
	
	public ParserRule getTypeNameExpCSRule() {
		return getTypeNameExpCSAccess().getRule();
	}
	
	//TypeExpCS base::TypedRefCS:
	//	(TypeNameExpCS | TypeLiteralCS | CollectionPatternCS) ownedMultiplicity=MultiplicityCS?
	public EssentialOCLGrammarAccess.TypeExpCSElements getTypeExpCSAccess() {
		return gaEssentialOCL.getTypeExpCSAccess();
	}
	
	public ParserRule getTypeExpCSRule() {
		return getTypeExpCSAccess().getRule();
	}
	
	////---------------------------------------------------------------------
	////  Expressions
	////---------------------------------------------------------------------
	//// An ExpCS permits a LetExpCS only in the final term to ensure
	////  that let is right associative, whereas infix operators are left associative.
	////   a = 64 / 16 / let b : Integer in 8 / let c : Integer in 4 
	//// is
	////   a = (64 / 16) / (let b : Integer in 8 / (let c : Integer in 4 ))
	/// * An expression elaborates a prefixed expression with zero or more binary operator and expression suffixes.
	// * An optionally prefixed let expression is permitted except when suffixed with further expressions.* / ExpCS:
	//	PrefixedPrimaryExpCS ({InfixExpCS.ownedLeft=current} name=BinaryOperatorName ownedRight=ExpCS)? | PrefixedLetExpCS;
	public EssentialOCLGrammarAccess.ExpCSElements getExpCSAccess() {
		return gaEssentialOCL.getExpCSAccess();
	}
	
	public ParserRule getExpCSRule() {
		return getExpCSAccess().getRule();
	}
	
	/// * A prefixed let expression elaborates a let expression with zero or more unary prefix operators. * / PrefixedLetExpCS
	//ExpCS:
	//	{PrefixExpCS} name=UnaryOperatorName ownedRight=PrefixedLetExpCS | LetExpCS
	public EssentialOCLGrammarAccess.PrefixedLetExpCSElements getPrefixedLetExpCSAccess() {
		return gaEssentialOCL.getPrefixedLetExpCSAccess();
	}
	
	public ParserRule getPrefixedLetExpCSRule() {
		return getPrefixedLetExpCSAccess().getRule();
	}
	
	/// * A prefixed primary expression elaborates a primary expression with zero or more unary prefix operators. * /
	//PrefixedPrimaryExpCS ExpCS:
	//	{PrefixExpCS} name=UnaryOperatorName ownedRight=PrefixedPrimaryExpCS | PrimaryExpCS
	public EssentialOCLGrammarAccess.PrefixedPrimaryExpCSElements getPrefixedPrimaryExpCSAccess() {
		return gaEssentialOCL.getPrefixedPrimaryExpCSAccess();
	}
	
	public ParserRule getPrefixedPrimaryExpCSRule() {
		return getPrefixedPrimaryExpCSAccess().getRule();
	}
	
	/// * A primary expression identifies the basic expressions from which more complex expressions may be constructed. * /
	//PrimaryExpCS ExpCS:
	//	NestedExpCS
	//	| IfExpCS
	//	| SelfExpCS
	//	| PrimitiveLiteralExpCS
	//	| TupleLiteralExpCS
	//	| MapLiteralExpCS
	//	| CollectionLiteralExpCS
	//	| LambdaLiteralExpCS
	//	| TypeLiteralExpCS
	//	| NameExpCS
	public EssentialOCLGrammarAccess.PrimaryExpCSElements getPrimaryExpCSAccess() {
		return gaEssentialOCL.getPrimaryExpCSAccess();
	}
	
	public ParserRule getPrimaryExpCSRule() {
		return getPrimaryExpCSAccess().getRule();
	}
	
	/// * A name expression is a generalised rule for expressions that start with a name and which may be followed by square, round or
	// * curly bracket clauses and optionally an @pre as well.* / NameExpCS:
	//	ownedPathName=PathNameCS ownedSquareBracketedClauses+=SquareBracketedClauseCS*
	//	ownedRoundBracketedClause=RoundBracketedClauseCS? ownedCurlyBracketedClause=CurlyBracketedClauseCS? (isPre?='@'
	//	'pre')?;
	public EssentialOCLGrammarAccess.NameExpCSElements getNameExpCSAccess() {
		return gaEssentialOCL.getNameExpCSAccess();
	}
	
	public ParserRule getNameExpCSRule() {
		return getNameExpCSAccess().getRule();
	}
	
	/// * A curly bracket clause is a generalized rule for the literal arguments of collections, maps, tuples and shadows.* /
	//CurlyBracketedClauseCS:
	//	{CurlyBracketedClauseCS} '{' ((ownedParts+=ShadowPartCS (',' ownedParts+=ShadowPartCS)*)?
	//	| value=StringLiteral) '}';
	public EssentialOCLGrammarAccess.CurlyBracketedClauseCSElements getCurlyBracketedClauseCSAccess() {
		return gaEssentialOCL.getCurlyBracketedClauseCSAccess();
	}
	
	public ParserRule getCurlyBracketedClauseCSRule() {
		return getCurlyBracketedClauseCSAccess().getRule();
	}
	
	/// * A curly bracket clause is a generalized rule for template specialisations and operations arguments.* /
	//RoundBracketedClauseCS:
	//	{RoundBracketedClauseCS} '(' (ownedArguments+=NavigatingArgCS ownedArguments+=NavigatingCommaArgCS*
	//	(ownedArguments+=NavigatingSemiArgCS ownedArguments+=NavigatingCommaArgCS*)? (ownedArguments+=NavigatingBarArgCS
	//	ownedArguments+=NavigatingCommaArgCS*)*)? ')';
	public EssentialOCLGrammarAccess.RoundBracketedClauseCSElements getRoundBracketedClauseCSAccess() {
		return gaEssentialOCL.getRoundBracketedClauseCSAccess();
	}
	
	public ParserRule getRoundBracketedClauseCSRule() {
		return getRoundBracketedClauseCSAccess().getRule();
	}
	
	/// * A square bracket clause is a generalized rule for association class qualifiers and roles.* / SquareBracketedClauseCS:
	//	'[' ownedTerms+=ExpCS (',' ownedTerms+=ExpCS)* ']';
	public EssentialOCLGrammarAccess.SquareBracketedClauseCSElements getSquareBracketedClauseCSAccess() {
		return gaEssentialOCL.getSquareBracketedClauseCSAccess();
	}
	
	public ParserRule getSquareBracketedClauseCSRule() {
		return getSquareBracketedClauseCSAccess().getRule();
	}
	
	/// * A navigating argument is a generalized rule for the first argument in a round bracket clause. This is typically the first operation
	// * parameter or an iterator. * / NavigatingArgCS:
	//	ownedNameExpression=super::NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)? | 'in'
	//	ownedInitExpression=ExpCS)? | ':' ownedType=TypeExpCS;
	public EssentialOCLGrammarAccess.NavigatingArgCSElements getNavigatingArgCSAccess() {
		return gaEssentialOCL.getNavigatingArgCSAccess();
	}
	
	public ParserRule getNavigatingArgCSRule() {
		return getNavigatingArgCSAccess().getRule();
	}
	
	//// Type-less init is an illegal infix expression
	/// * A navigating bar argument is a generalized rule for a bar-prefixed argument in a round bracket clause. This is typically the body of an iteration. * /
	//NavigatingBarArgCS NavigatingArgCS:
	//	prefix='|' ownedNameExpression=super::NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)?)?
	public EssentialOCLGrammarAccess.NavigatingBarArgCSElements getNavigatingBarArgCSAccess() {
		return gaEssentialOCL.getNavigatingBarArgCSAccess();
	}
	
	public ParserRule getNavigatingBarArgCSRule() {
		return getNavigatingBarArgCSAccess().getRule();
	}
	
	//// Type-less init is an illegal infix expression
	/// * A navigating comma argument is a generalized rule for non-first argument in a round bracket clause. These are typically non-first operation
	// * parameters or a second iterator. * / NavigatingCommaArgCS NavigatingArgCS:
	//	prefix=',' ownedNameExpression=super::NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)? |
	//	'in' ownedInitExpression=ExpCS)?
	public EssentialOCLGrammarAccess.NavigatingCommaArgCSElements getNavigatingCommaArgCSAccess() {
		return gaEssentialOCL.getNavigatingCommaArgCSAccess();
	}
	
	public ParserRule getNavigatingCommaArgCSRule() {
		return getNavigatingCommaArgCSAccess().getRule();
	}
	
	//// Type-less init is an illegal infix expression
	/// * A navigating semi argument is a generalized rule for a semicolon prefixed argument in a round bracket clause. This is typically an iterate accumulator. * /
	//NavigatingSemiArgCS NavigatingArgCS:
	//	prefix=';' ownedNameExpression=super::NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)?)?
	public EssentialOCLGrammarAccess.NavigatingSemiArgCSElements getNavigatingSemiArgCSAccess() {
		return gaEssentialOCL.getNavigatingSemiArgCSAccess();
	}
	
	public ParserRule getNavigatingSemiArgCSRule() {
		return getNavigatingSemiArgCSAccess().getRule();
	}
	
	//IfExpCS:
	//	'if' ownedCondition=(ExpCS | PatternExpCS)
	//	'then' ownedThenExpression=ExpCS
	//	//	ifThenExpressions+=IfThenExpCS
	//	ownedIfThenExpressions+=ElseIfThenExpCS*
	//	'else' ownedElseExpression=ExpCS
	//	'endif';
	public EssentialOCLGrammarAccess.IfExpCSElements getIfExpCSAccess() {
		return gaEssentialOCL.getIfExpCSAccess();
	}
	
	public ParserRule getIfExpCSRule() {
		return getIfExpCSAccess().getRule();
	}
	
	////IfThenExpCS returns IfThenExpCS:
	////	'if' condition=ExpCS
	////	'then' thenExpression=ExpCS
	////;
	//ElseIfThenExpCS IfThenExpCS:
	//	'elseif' ownedCondition=ExpCS
	//	'then' ownedThenExpression=ExpCS
	public EssentialOCLGrammarAccess.ElseIfThenExpCSElements getElseIfThenExpCSAccess() {
		return gaEssentialOCL.getElseIfThenExpCSAccess();
	}
	
	public ParserRule getElseIfThenExpCSRule() {
		return getElseIfThenExpCSAccess().getRule();
	}
	
	//LetExpCS:
	//	'let' ownedVariables+=LetVariableCS (',' ownedVariables+=LetVariableCS)*
	//	'in' ownedInExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetExpCSElements getLetExpCSAccess() {
		return gaEssentialOCL.getLetExpCSAccess();
	}
	
	public ParserRule getLetExpCSRule() {
		return getLetExpCSAccess().getRule();
	}
	
	//LetVariableCS:
	//	name=super::UnrestrictedName ownedRoundBracketedClause=RoundBracketedClauseCS? (':' ownedType=TypeExpCS)? '='
	//	ownedInitExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetVariableCSElements getLetVariableCSAccess() {
		return gaEssentialOCL.getLetVariableCSAccess();
	}
	
	public ParserRule getLetVariableCSRule() {
		return getLetVariableCSAccess().getRule();
	}
	
	//NestedExpCS:
	//	'(' ownedExpression=ExpCS ')';
	public EssentialOCLGrammarAccess.NestedExpCSElements getNestedExpCSAccess() {
		return gaEssentialOCL.getNestedExpCSAccess();
	}
	
	public ParserRule getNestedExpCSRule() {
		return getNestedExpCSAccess().getRule();
	}
	
	//SelfExpCS:
	//	{SelfExpCS} 'self';
	public EssentialOCLGrammarAccess.SelfExpCSElements getSelfExpCSAccess() {
		return gaEssentialOCL.getSelfExpCSAccess();
	}
	
	public ParserRule getSelfExpCSRule() {
		return getSelfExpCSAccess().getRule();
	}
	
	//MultiplicityBoundsCS:
	//	lowerBound=LOWER ('..' upperBound=UPPER)?;
	public BaseGrammarAccess.MultiplicityBoundsCSElements getMultiplicityBoundsCSAccess() {
		return gaBase.getMultiplicityBoundsCSAccess();
	}
	
	public ParserRule getMultiplicityBoundsCSRule() {
		return getMultiplicityBoundsCSAccess().getRule();
	}
	
	//MultiplicityCS:
	//	'[' (MultiplicityBoundsCS | MultiplicityStringCS) ('|?' | isNullFree?='|1')? ']';
	public BaseGrammarAccess.MultiplicityCSElements getMultiplicityCSAccess() {
		return gaBase.getMultiplicityCSAccess();
	}
	
	public ParserRule getMultiplicityCSRule() {
		return getMultiplicityCSAccess().getRule();
	}
	
	//MultiplicityStringCS:
	//	stringBounds=('*' | '+' | '?');
	public BaseGrammarAccess.MultiplicityStringCSElements getMultiplicityStringCSAccess() {
		return gaBase.getMultiplicityStringCSAccess();
	}
	
	public ParserRule getMultiplicityStringCSRule() {
		return getMultiplicityStringCSAccess().getRule();
	}
	
	//PathNameCS:
	//	ownedPathElements+=FirstPathElementCS ('::' ownedPathElements+=NextPathElementCS)*;
	public BaseGrammarAccess.PathNameCSElements getPathNameCSAccess() {
		return gaBase.getPathNameCSAccess();
	}
	
	public ParserRule getPathNameCSRule() {
		return getPathNameCSAccess().getRule();
	}
	
	//FirstPathElementCS PathElementCS:
	//	referredElement=[pivot::NamedElement|super::UnrestrictedName]
	public BaseGrammarAccess.FirstPathElementCSElements getFirstPathElementCSAccess() {
		return gaBase.getFirstPathElementCSAccess();
	}
	
	public ParserRule getFirstPathElementCSRule() {
		return getFirstPathElementCSAccess().getRule();
	}
	
	//NextPathElementCS PathElementCS:
	//	referredElement=[pivot::NamedElement|super::UnreservedName]
	public BaseGrammarAccess.NextPathElementCSElements getNextPathElementCSAccess() {
		return gaBase.getNextPathElementCSAccess();
	}
	
	public ParserRule getNextPathElementCSRule() {
		return getNextPathElementCSAccess().getRule();
	}
	
	//TemplateBindingCS:
	//	ownedSubstitutions+=TemplateParameterSubstitutionCS (',' ownedSubstitutions+=TemplateParameterSubstitutionCS)*
	//	ownedMultiplicity=MultiplicityCS?;
	public BaseGrammarAccess.TemplateBindingCSElements getTemplateBindingCSAccess() {
		return gaBase.getTemplateBindingCSAccess();
	}
	
	public ParserRule getTemplateBindingCSRule() {
		return getTemplateBindingCSAccess().getRule();
	}
	
	//TemplateParameterSubstitutionCS:
	//	ownedActualParameter=TypeRefCS;
	public BaseGrammarAccess.TemplateParameterSubstitutionCSElements getTemplateParameterSubstitutionCSAccess() {
		return gaBase.getTemplateParameterSubstitutionCSAccess();
	}
	
	public ParserRule getTemplateParameterSubstitutionCSRule() {
		return getTemplateParameterSubstitutionCSAccess().getRule();
	}
	
	//TypeParameterCS:
	//	name=super::UnrestrictedName ('extends' ownedExtends+=super::TypedRefCS ('&&' ownedExtends+=super::TypedRefCS)*)?;
	public BaseGrammarAccess.TypeParameterCSElements getTypeParameterCSAccess() {
		return gaBase.getTypeParameterCSAccess();
	}
	
	public ParserRule getTypeParameterCSRule() {
		return getTypeParameterCSAccess().getRule();
	}
	
	//TypeRefCS:
	//	super::TypedRefCS | WildcardTypeRefCS;
	public BaseGrammarAccess.TypeRefCSElements getTypeRefCSAccess() {
		return gaBase.getTypeRefCSAccess();
	}
	
	public ParserRule getTypeRefCSRule() {
		return getTypeRefCSAccess().getRule();
	}
	
	//TypedTypeRefCS:
	//	ownedPathName=PathNameCS ('(' ownedBinding=TemplateBindingCS ')')?;
	public BaseGrammarAccess.TypedTypeRefCSElements getTypedTypeRefCSAccess() {
		return gaBase.getTypedTypeRefCSAccess();
	}
	
	public ParserRule getTypedTypeRefCSRule() {
		return getTypedTypeRefCSAccess().getRule();
	}
	
	//WildcardTypeRefCS:
	//	{WildcardTypeRefCS} '?' ('extends' ownedExtends=super::TypedRefCS)?;
	public BaseGrammarAccess.WildcardTypeRefCSElements getWildcardTypeRefCSAccess() {
		return gaBase.getWildcardTypeRefCSAccess();
	}
	
	public ParserRule getWildcardTypeRefCSRule() {
		return getWildcardTypeRefCSAccess().getRule();
	}
	
	//ID:
	//	SIMPLE_ID | ESCAPED_ID;
	public BaseGrammarAccess.IDElements getIDAccess() {
		return gaBase.getIDAccess();
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}
	
	//Identifier:
	//	ID;
	public BaseGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaBase.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	/// * A lowerbounded integer is used to define the lowerbound of a collection multiplicity. The value may not be the unlimited value. * /
	//LOWER ecore::EInt:
	//	INT
	public BaseGrammarAccess.LOWERElements getLOWERAccess() {
		return gaBase.getLOWERAccess();
	}
	
	public ParserRule getLOWERRule() {
		return getLOWERAccess().getRule();
	}
	
	/// * A number may be an integer or floating point value. The declaration here appears to be that for just an integer. This is to avoid
	// * lookahead conflicts in simple lexers between a dot within a floating point number and the dot-dot in a CollectionLiteralPartCS. A
	// * practical implementation should give high priority to a successful parse of INT ('.' INT)? (('e' | 'E') ('+' | '-')? INT)? than
	// * to the unsuccessful partial parse of INT '..'. The type of the INT terminal is String to allow the floating point syntax to be used.
	// * / NUMBER_LITERAL BigNumber:
	//	INT
	public BaseGrammarAccess.NUMBER_LITERALElements getNUMBER_LITERALAccess() {
		return gaBase.getNUMBER_LITERALAccess();
	}
	
	public ParserRule getNUMBER_LITERALRule() {
		return getNUMBER_LITERALAccess().getRule();
	}
	
	//// EssentialOCLTokenSource pieces this together ('.' INT)? (('e' | 'E') ('+' | '-')? INT)?;
	//StringLiteral:
	//	SINGLE_QUOTED_STRING;
	public BaseGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaBase.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	/// * An upperbounded integer is used to define the upperbound of a collection multiplicity. The value may be the unlimited value. * /
	//UPPER ecore::EInt:
	//	INT | '*'
	public BaseGrammarAccess.UPPERElements getUPPERAccess() {
		return gaBase.getUPPERAccess();
	}
	
	public ParserRule getUPPERRule() {
		return getUPPERAccess().getRule();
	}
	
	//URI:
	//	SINGLE_QUOTED_STRING;
	public BaseGrammarAccess.URIElements getURIAccess() {
		return gaBase.getURIAccess();
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}
	
	//terminal fragment ESCAPED_CHARACTER:
	//	'\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\');
	public TerminalRule getESCAPED_CHARACTERRule() {
		return gaBase.getESCAPED_CHARACTERRule();
	}
	
	//terminal fragment LETTER_CHARACTER:
	//	'a'..'z' | 'A'..'Z' | '_';
	public TerminalRule getLETTER_CHARACTERRule() {
		return gaBase.getLETTER_CHARACTERRule();
	}
	
	//terminal DOUBLE_QUOTED_STRING:
	//	'"' (ESCAPED_CHARACTER | !('\\' | '"'))* '"';
	public TerminalRule getDOUBLE_QUOTED_STRINGRule() {
		return gaBase.getDOUBLE_QUOTED_STRINGRule();
	}
	
	//terminal SINGLE_QUOTED_STRING:
	//	"'" (ESCAPED_CHARACTER | !('\\' | "'"))* "'";
	public TerminalRule getSINGLE_QUOTED_STRINGRule() {
		return gaBase.getSINGLE_QUOTED_STRINGRule();
	}
	
	//terminal ML_SINGLE_QUOTED_STRING:
	//	"/'"->"'/";
	public TerminalRule getML_SINGLE_QUOTED_STRINGRule() {
		return gaBase.getML_SINGLE_QUOTED_STRINGRule();
	}
	
	//terminal SIMPLE_ID:
	//	LETTER_CHARACTER (LETTER_CHARACTER | '0'..'9')*;
	public TerminalRule getSIMPLE_IDRule() {
		return gaBase.getSIMPLE_IDRule();
	}
	
	//terminal ESCAPED_ID:
	//	"_" SINGLE_QUOTED_STRING;
	public TerminalRule getESCAPED_IDRule() {
		return gaBase.getESCAPED_IDRule();
	}
	
	//terminal INT:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaBase.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaBase.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaBase.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaBase.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaBase.getANY_OTHERRule();
	}
}
